#[1]   cr_byr_bxr_latching_test.asm
   11                     ;--------------- END INCLUDES ------------------
   12                     
   13           0077      BYRB_LINE       = $0077
   14           007A      BYRA_LINE       = $007A
   15           007D      BXRB_LINE       = $007D
   16           0080      BXRA_LINE       = $0080
   17           0086      CRB_LINE        = $0086
   18           008A      CRA_LINE        = $008A
   19           0095      BOT_LINE        = $0095
   20                     
   21                     
   22           003F      TOP_BYR         = $003F
   23           0043      BOT_BYR         = $0043
   24                     
   25           0008      LFT_BXR         = $0008
   26                     
   27           00CC      CR_BGON         = $00CC
   28           004C      CR_BGOFF        = $004C
   29                     
   30                     
   31           0000      BYRB_TEST   = $00
   32           0001      BYRA_TEST   = $01
   33           0002      BXRB_TEST   = $02
   34           0003      BXRA_TEST   = $03
   35           0004      CRB_TEST    = $04
   36           0005      CRA_TEST    = $05
   37                     
   38                     ;PAD 
   39           0010      PAD_UP          = $10
   40           0020      PAD_RIGHT       = $20
   41           0040      PAD_DOWN        = $40
   42           0080      PAD_LEFT        = $80
   43           0001      PAD_I           = $01
   44           0002      PAD_II          = $02
   45                     
   46                     
   47           0006      NOP_ARRAY_LEN = $06
   48           0009      NOPS_MAX      = $09     ; 10 possible values
   49                     
   50           0400      TILEMAP_LEN       = $400
   51           0800      ASCII_VRAM    = $800
   52           0800      ASCII_VRAM_LEN = $800
   53           1000      BG_VRAM       = ASCII_VRAM + ASCII_VRAM_LEN
   54           0200      BG_VRAM_LEN   = $200
   55                     
   56           0900      HEX_VRAM      = ASCII_VRAM+$100
   57                     
   58                     
   59           0020      BATWIDTH        = 32    ;Set to 32, 64, or 128
   60           0020      BATHEIGHT       = 32    ;Set to 32 or 64.
   61                     
   62                     
   63                     
   64                     ; Zero-page variables
   65           2000              .zp
   66  --:2000            test_nb:        .ds 1
   67  --:2001            pad_prev:   .ds 1
   68  --:2002            pad_cur:    .ds 1
   69  --:2003            nop_count:  .ds 6       ; array of 6 values
   70  --:2009            nop_index:  .ds 1       ; index nop_count array 0-5
   71  --:200A            nop_pos:    .ds 2       ; getvalues from nop pos array
   72                     
   73                     
   74                     ;==============================
   75           0000              .code
   76           0000              .bank   $0
   77           E000              .org    $E000
   78                     
   79                     
   80  00:E000            MAIN:
   81                             INTS_OFF                ;DISABLE INTERRUPTS!
       00:E000  03 05             st0  #5
       00:E002  13 00             st1   #$00
       00:E004  23 00             st2   #$00
   82                             
   83  00:E006  64 09             stz <nop_index
   84  00:E008  A2 06             ldx #NOP_ARRAY_LEN
   85                     
   86  00:E00A            .clear_nop_count_array  
   87  00:E00A  CA                dex
   88  00:E00B  74 03             stz <nop_count, x
   89  00:E00D  D0 FB             bne .clear_nop_count_array      
   90                             
   91  00:E00F  64 01             stz <pad_prev
   92  00:E011  64 00             stz     <test_nb
   93                             
   94  00:E013  20 0C E5          jsr     Clear_BAT
   95                     
   96                             ; load tile map, tiles and palette
   97                             map     FontPal
       00:E016  A9 02              lda   #bank(FontPal)        ; addressable memory
       00:E018  53 04              tam   #page(FontPal)
   98                             vload   $0000, Tilemap, TILEMAP_LEN
                0001              .if (3 = 3)
                                   stw   #$0000,<_di
       00:E01A  A9 00              lda    LOW_BYTE #$0000
       00:E01C  85 F0              sta    LOW_BYTE <_di
       00:E01E  A9 00              lda    HIGH_BYTE #$0000
       00:E020  85 F1              sta    HIGH_BYTE <_di
                                   stw   #Tilemap,<_si
       00:E022  A9 40              lda    LOW_BYTE #Tilemap
       00:E024  85 EE              sta    LOW_BYTE <_si
       00:E026  A9 54              lda    HIGH_BYTE #Tilemap
       00:E028  85 EF              sta    HIGH_BYTE <_si
                                   stw   #TILEMAP_LEN,<_cx     ;WTF is this??? ERRORS!!! "stw   TILEMAP_LEN,<_cx"
       00:E02A  A9 00              lda    LOW_BYTE #TILEMAP_LEN
       00:E02C  85 FC              sta    LOW_BYTE <_cx
       00:E02E  A9 04              lda    HIGH_BYTE #TILEMAP_LEN
       00:E030  85 FD              sta    HIGH_BYTE <_cx
                                  .else
                                  .endif
       00:E032  20 58 FE           jsr   load_vram
   99                             ; font
  100                             set_bgpal       #0, FontPal, #1
       00:E035  A9 00              lda   #0
       00:E037  85 F8              sta   <_al
                                   stw   #FontPal,<_si
       00:E039  A9 00              lda    LOW_BYTE #FontPal
       00:E03B  85 EE              sta    LOW_BYTE <_si
       00:E03D  A9 40              lda    HIGH_BYTE #FontPal
       00:E03F  85 EF              sta    HIGH_BYTE <_si
                0002              .if 2
       00:E041  A9 01              lda   #1
                                  .else
                                  .endif
       00:E043  85 FC              sta   <_cl
       00:E045  20 00 FE           jsr   set_palette
  101                             vload   ASCII_VRAM, Tiles, ASCII_VRAM_LEN
                0001              .if (3 = 3)
                                   stw   #ASCII_VRAM,<_di
       00:E048  A9 00              lda    LOW_BYTE #ASCII_VRAM
       00:E04A  85 F0              sta    LOW_BYTE <_di
       00:E04C  A9 08              lda    HIGH_BYTE #ASCII_VRAM
       00:E04E  85 F1              sta    HIGH_BYTE <_di
                                   stw   #Tiles,<_si
       00:E050  A9 20              lda    LOW_BYTE #Tiles
       00:E052  85 EE              sta    LOW_BYTE <_si
       00:E054  A9 40              lda    HIGH_BYTE #Tiles
       00:E056  85 EF              sta    HIGH_BYTE <_si
                                   stw   #ASCII_VRAM_LEN,<_cx     ;WTF is this??? ERRORS!!! "stw   ASCII_VRAM_LEN,<_cx"
       00:E058  A9 00              lda    LOW_BYTE #ASCII_VRAM_LEN
       00:E05A  85 FC              sta    LOW_BYTE <_cx
       00:E05C  A9 08              lda    HIGH_BYTE #ASCII_VRAM_LEN
       00:E05E  85 FD              sta    HIGH_BYTE <_cx
                                  .else
                                  .endif
       00:E060  20 58 FE           jsr   load_vram
  102                             ; bg tiles from Bonk
  103                             set_bgpal       #1, BonkPal, #1
       00:E063  A9 01              lda   #1
       00:E065  85 F8              sta   <_al
                                   stw   #BonkPal,<_si
       00:E067  A9 20              lda    LOW_BYTE #BonkPal
       00:E069  85 EE              sta    LOW_BYTE <_si
       00:E06B  A9 50              lda    HIGH_BYTE #BonkPal
       00:E06D  85 EF              sta    HIGH_BYTE <_si
                0002              .if 2
       00:E06F  A9 01              lda   #1
                                  .else
                                  .endif
       00:E071  85 FC              sta   <_cl
       00:E073  20 00 FE           jsr   set_palette
  104                             vload   BG_VRAM, BonkTiles, BG_VRAM_LEN
                0001              .if (3 = 3)
                                   stw   #BG_VRAM,<_di
       00:E076  A9 00              lda    LOW_BYTE #BG_VRAM
       00:E078  85 F0              sta    LOW_BYTE <_di
       00:E07A  A9 10              lda    HIGH_BYTE #BG_VRAM
       00:E07C  85 F1              sta    HIGH_BYTE <_di
                                   stw   #BonkTiles,<_si
       00:E07E  A9 40              lda    LOW_BYTE #BonkTiles
       00:E080  85 EE              sta    LOW_BYTE <_si
       00:E082  A9 50              lda    HIGH_BYTE #BonkTiles
       00:E084  85 EF              sta    HIGH_BYTE <_si
                                   stw   #BG_VRAM_LEN,<_cx     ;WTF is this??? ERRORS!!! "stw   BG_VRAM_LEN,<_cx"
       00:E086  A9 00              lda    LOW_BYTE #BG_VRAM_LEN
       00:E088  85 FC              sta    LOW_BYTE <_cx
       00:E08A  A9 02              lda    HIGH_BYTE #BG_VRAM_LEN
       00:E08C  85 FD              sta    HIGH_BYTE <_cx
                                  .else
                                  .endif
       00:E08E  20 58 FE           jsr   load_vram
  105                             
  106                     
  107                             BG_GREEN
                                  stwz    color_reg
       00:E091  9C 02 04           stz    LOW_BYTE color_reg
       00:E094  9C 03 04           stz    HIGH_BYTE color_reg
                                  stw     #%0000_000_111_000_000,color_data
       00:E097  A9 C0              lda    LOW_BYTE #%0000_000_111_000_000
       00:E099  8D 04 04           sta    LOW_BYTE color_data
       00:E09C  A9 01              lda    HIGH_BYTE #%0000_000_111_000_000
       00:E09E  8D 05 04           sta    HIGH_BYTE color_data
  108                             BORD_BLUE
                                  stw     #$0100,color_reg
       00:E0A1  A9 00              lda    LOW_BYTE #$0100
       00:E0A3  8D 02 04           sta    LOW_BYTE color_reg
       00:E0A6  A9 01              lda    HIGH_BYTE #$0100
       00:E0A8  8D 03 04           sta    HIGH_BYTE color_reg
                                  stw     #%0000_000_000_000_111,color_data
       00:E0AB  A9 07              lda    LOW_BYTE #%0000_000_000_000_111
       00:E0AD  8D 04 04           sta    LOW_BYTE color_data
       00:E0B0  A9 00              lda    HIGH_BYTE #%0000_000_000_000_111
       00:E0B2  8D 05 04           sta    HIGH_BYTE color_data
  109                             SCREEN_ON
       00:E0B5  03 05             st0  #5
       00:E0B7  13 CC             st1   #$CC
       00:E0B9  23 00             st2   #$00
  110                     
  111                             vreg    #6      ;RCR
       00:E0BB  A9 06             lda     #6
       00:E0BD  85 F7             sta     <_vreg
       00:E0BF  8D 00 00          sta     video_reg
  112                             stw             #BYRB_LINE,video_data
       00:E0C2  A9 77              lda    LOW_BYTE #BYRB_LINE
       00:E0C4  8D 02 00           sta    LOW_BYTE video_data
       00:E0C7  A9 00              lda    HIGH_BYTE #BYRB_LINE
       00:E0C9  8D 03 00           sta    HIGH_BYTE video_data
  113                             
  114                     
  115                     ; make this infinite loop 65 cycles long so that it gets repeated 7 times per line exactly
  116                     ; 1 line is 455 cpu cycles and 455 / 65 = 7. bra = 4, sax = 3 and fill the rest with 29 nops
  117  00:E0CC            .loop                   ;Here's an infinite loop...
  118  00:E0CC  22                sax     ; 3 cycles
  119  00:E0CD  EA                nop
  120  00:E0CE  EA                nop
  121  00:E0CF  EA                nop
  122  00:E0D0  EA                nop
  123  00:E0D1  EA                nop
  124  00:E0D2  EA                nop
  125  00:E0D3  EA                nop
  126  00:E0D4  EA                nop
  127  00:E0D5  EA                nop
  128  00:E0D6  EA                nop     ;10
  129  00:E0D7  EA                nop
  130  00:E0D8  EA                nop
  131  00:E0D9  EA                nop
  132  00:E0DA  EA                nop
  133  00:E0DB  EA                nop
  134  00:E0DC  EA                nop
  135  00:E0DD  EA                nop
  136  00:E0DE  EA                nop
  137  00:E0DF  EA                nop
  138  00:E0E0  EA                nop     ;20
  139  00:E0E1  EA                nop
  140  00:E0E2  EA                nop
  141  00:E0E3  EA                nop
  142  00:E0E4  EA                nop
  143  00:E0E5  EA                nop
  144  00:E0E6  EA                nop
  145  00:E0E7  EA                nop
  146  00:E0E8  EA                nop
  147  00:E0E9  EA                nop ; 29 - 29 * 2 = 58 cycles
  148  00:E0EA  80 E0             bra     .loop   ; 4 cycles
  149                     
  150                     
  151  00:E0EC            MY_VSYNC:
  152                             BORD_RED
                                  stw     #$0100,color_reg
       00:E0EC  A9 00              lda    LOW_BYTE #$0100
       00:E0EE  8D 02 04           sta    LOW_BYTE color_reg
       00:E0F1  A9 01              lda    HIGH_BYTE #$0100
       00:E0F3  8D 03 04           sta    HIGH_BYTE color_reg
                                  stw     #%0000_000_000_111_000,color_data
       00:E0F6  A9 38              lda    LOW_BYTE #%0000_000_000_111_000
       00:E0F8  8D 04 04           sta    LOW_BYTE color_data
       00:E0FB  A9 00              lda    HIGH_BYTE #%0000_000_000_111_000
       00:E0FD  8D 05 04           sta    HIGH_BYTE color_data
  153  00:E100  48                pha
  154  00:E101  68                pla
  155  00:E102  48                pha
  156  00:E103  68                pla
  157                             BORD_BLUE
                                  stw     #$0100,color_reg
       00:E104  A9 00              lda    LOW_BYTE #$0100
       00:E106  8D 02 04           sta    LOW_BYTE color_reg
       00:E109  A9 01              lda    HIGH_BYTE #$0100
       00:E10B  8D 03 04           sta    HIGH_BYTE color_reg
                                  stw     #%0000_000_000_000_111,color_data
       00:E10E  A9 07              lda    LOW_BYTE #%0000_000_000_000_111
       00:E110  8D 04 04           sta    LOW_BYTE color_data
       00:E113  A9 00              lda    HIGH_BYTE #%0000_000_000_000_111
       00:E115  8D 05 04           sta    HIGH_BYTE color_data
  158                     
  159                             ; set RCR ready for next frame
  160                             vreg    #6      ;RCR    
       00:E118  A9 06             lda     #6
       00:E11A  85 F7             sta     <_vreg
       00:E11C  8D 00 00          sta     video_reg
  161                             stw     #BYRB_LINE,video_data
       00:E11F  A9 77              lda    LOW_BYTE #BYRB_LINE
       00:E121  8D 02 00           sta    LOW_BYTE video_data
       00:E124  A9 00              lda    HIGH_BYTE #BYRB_LINE
       00:E126  8D 03 00           sta    HIGH_BYTE video_data
  162                     
  163                             ; reset BYR
  164                             vreg    #8      ;BYR
       00:E129  A9 08             lda     #8
       00:E12B  85 F7             sta     <_vreg
       00:E12D  8D 00 00          sta     video_reg
  165                             stwz    video_data
       00:E130  9C 02 00           stz    LOW_BYTE video_data
       00:E133  9C 03 00           stz    HIGH_BYTE video_data
  166                             
  167                             ; reset BXR
  168                             vreg    #7      ;BXR
       00:E136  A9 07             lda     #7
       00:E138  85 F7             sta     <_vreg
       00:E13A  8D 00 00          sta     video_reg
  169                             stwz    video_data
       00:E13D  9C 02 00           stz    LOW_BYTE video_data
       00:E140  9C 03 00           stz    HIGH_BYTE video_data
  170                             
  171                             ; reenable BG
  172                             vreg    #5      ;CR
       00:E143  A9 05             lda     #5
       00:E145  85 F7             sta     <_vreg
       00:E147  8D 00 00          sta     video_reg
  173                             stw             #CR_BGON,video_data
       00:E14A  A9 CC              lda    LOW_BYTE #CR_BGON
       00:E14C  8D 02 00           sta    LOW_BYTE video_data
       00:E14F  A9 00              lda    HIGH_BYTE #CR_BGON
       00:E151  8D 03 00           sta    HIGH_BYTE video_data
  174                             
  175  00:E154  64 00             stz     <test_nb
  176                             
  177                     
  178                     ; pad reg $1000
  179                     ;SEL = 0                SEL = 1
  180                     ;D3 :   Run             Left
  181                     ;D2 :   Select          Down
  182                     ;D1 :   Button II       Right
  183                     ;D0 :   Button I        Up      
  184                     ;read pad
  185                     ; read pad direction
  186  00:E156  A2 01             ldx #$01
  187  00:E158  8E 00 10          stx $1000
  188  00:E15B  A2 03             ldx #$03
  189  00:E15D  8E 00 10          stx $1000
  190  00:E160  A2 01             ldx #$01
  191  00:E162  8E 00 10          stx $1000
  192  00:E165  AD 00 10          lda $1000
  193  00:E168  0A                asl a
  194  00:E169  0A                asl a
  195  00:E16A  0A                asl a
  196  00:E16B  0A                asl a
  197  00:E16C  85 02             sta <pad_cur
  198                     ; read pad buttons
  199  00:E16E  82                clx
  200  00:E16F  8E 00 10          stx $1000
  201  00:E172  A2 02             ldx #$02
  202  00:E174  8E 00 10          stx $1000
  203  00:E177  82                clx
  204  00:E178  8E 00 10          stx $1000
  205  00:E17B  AD 00 10          lda $1000
  206  00:E17E  29 0F             and #$0F
  207  00:E180  05 02             ora <pad_cur
  208  00:E182  49 FF             eor #$FF 
  209  00:E184  85 02             sta <pad_cur
  210                     ; detect changes and only 0 to 1 transitions
  211  00:E186  45 01             eor <pad_prev
  212  00:E188  D0 01             bne .check_btns
  213  00:E18A  60                rts
  214  00:E18B            .check_btns     
  215  00:E18B  25 02             and <pad_cur
  216  00:E18D  A6 02             ldx <pad_cur
  217  00:E18F  86 01             stx <pad_prev
  218  00:E191  A6 09             ldx <nop_index
  219  00:E193  B4 03             ldy <nop_count, x
  220  00:E195            .check_btn_1    
  221  00:E195  C9 01             cmp #PAD_I
  222  00:E197  D0 06             bne .check_btn_2
  223  00:E199  C0 09             cpy #NOPS_MAX
  224  00:E19B  F0 02             beq .check_btn_2
  225  00:E19D  F6 03             inc <nop_count, x        
  226  00:E19F            .check_btn_2    
  227  00:E19F  C9 02             cmp #PAD_II
  228  00:E1A1  D0 06             bne .check_btn_up
  229  00:E1A3  C0 00             cpy #$00
  230  00:E1A5  F0 02             beq .check_btn_up
  231  00:E1A7  D6 03             dec <nop_count, x
  232  00:E1A9            .check_btn_up
  233  00:E1A9  C9 10             cmp #PAD_UP
  234  00:E1AB  D0 06             bne .check_btn_down
  235  00:E1AD  E0 05             cpx #NOP_ARRAY_LEN - 1
  236  00:E1AF  F0 02             beq .check_btn_down
  237  00:E1B1  E6 09             inc <nop_index
  238  00:E1B3            .check_btn_down
  239  00:E1B3  C9 40             cmp #PAD_DOWN
  240  00:E1B5  D0 0A             bne .end_btn_checks
  241  00:E1B7  E0 00             cpx #$00
  242  00:E1B9  F0 06             beq .end_btn_checks
  243  00:E1BB  C6 09             dec <nop_index
  244                     
  245                     ; check right   
  246  00:E1BD  C9 20             cmp #PAD_RIGHT
  247                     
  248                     ; check left    
  249  00:E1BF  C9 80             cmp #PAD_LEFT
  250                                     
  251                             
  252  00:E1C1            .end_btn_checks
  253                     
  254                             ;stw    #$007D,<_di
  255                             ;jsr    set_write
  256                             ;lda    <nop_count
  257                             ;jsr    Print_Byte
  258                     
  259                     ; change value of the position pointed at
  260                     ; get value from pos array
  261  00:E1C1  A5 09             lda <nop_index
  262  00:E1C3  0A                asl a
  263  00:E1C4  22                sax
  264  00:E1C5  BD 00 E5          lda nop_pos_array,x
  265  00:E1C8  85 0A             sta <nop_pos  
  266  00:E1CA  E8                inx
  267  00:E1CB  BD 00 E5          lda nop_pos_array,x
  268  00:E1CE  85 0B             sta <nop_pos + 1  
  269                     ; apply new value to position
  270  00:E1D0  A6 09             ldx <nop_index
  271                             stw     <nop_pos,<_di
       00:E1D2  A5 0A              lda    LOW_BYTE <nop_pos
       00:E1D4  85 F0              sta    LOW_BYTE <_di
       00:E1D6  A5 0B              lda    HIGH_BYTE <nop_pos
       00:E1D8  85 F1              sta    HIGH_BYTE <_di
  272  00:E1DA  20 99 FE          jsr     set_write
  273  00:E1DD  B5 03             lda     <nop_count,x
  274  00:E1DF  20 2F E5          jsr     Print_Byte
  275                             
  276  00:E1E2  60                rts
  277                     
  278                     ; it takes 32 cycles to get from interrupt routine + 8 cycles for interrupt instruction = 40 cycles
  279                     ; loop 0 takes cycles with 0 nops
  280                     ; loop 1 takes 580 cycles with 0 nops
  281                     ; loop 2 takes 538 cycles with 0 nops
  282                     ; loop 3 takes  cycles with 0 nops
  283                     ; loop 4 takes  cycles with 0 nops
  284                     ; loop 5 takes  cycles with 0 nops
  285                     ; start 00:E21D, end 00:E525
  286  00:E1E3            MY_HSYNC:
  287                             BORD_WHITE
                                  stw     #$0100,color_reg
       00:E1E3  A9 00              lda    LOW_BYTE #$0100
       00:E1E5  8D 02 04           sta    LOW_BYTE color_reg
       00:E1E8  A9 01              lda    HIGH_BYTE #$0100
       00:E1EA  8D 03 04           sta    HIGH_BYTE color_reg
                                  stw     #%0000_000_111_111_111,color_data
       00:E1ED  A9 FF              lda    LOW_BYTE #%0000_000_111_111_111
       00:E1EF  8D 04 04           sta    LOW_BYTE color_data
       00:E1F2  A9 01              lda    HIGH_BYTE #%0000_000_111_111_111
       00:E1F4  8D 05 04           sta    HIGH_BYTE color_data
  288                             ;BG_CYAN
  289                             ; load current test_nb value and inc for next time
  290  00:E1F7  A5 00             lda     <test_nb
  291  00:E1F9  C9 00             cmp     #BYRB_TEST
  292  00:E1FB  D0 03             bne     .check_test2
  293  00:E1FD  4C 5F E2          jmp             START_TEST1      
  294  00:E200            .check_test2    
  295  00:E200  C9 01             cmp     #BYRA_TEST
  296  00:E202  D0 03             bne     .check_test3
  297  00:E204  4C BE E2          jmp             START_TEST2      
  298  00:E207            .check_test3    
  299  00:E207  C9 02             cmp     #BXRB_TEST
  300  00:E209  D0 03             bne     .check_test4
  301  00:E20B  4C EC E2          jmp             START_TEST3      
  302  00:E20E            .check_test4    
  303  00:E20E  C9 03             cmp     #BXRA_TEST
  304  00:E210  D0 03             bne     .check_test5
  305  00:E212  4C 2B E3          jmp             START_TEST4      
  306  00:E215            .check_test5    
  307  00:E215  C9 04             cmp     #CRB_TEST
  308  00:E217  D0 03             bne     .check_test6
  309  00:E219  4C 59 E3          jmp             START_TEST5      
  310  00:E21C            .check_test6    
  311  00:E21C  C9 05             cmp     #CRA_TEST
  312  00:E21E  D0 03             bne     .close_test_session
  313  00:E220  4C AB E3          jmp             START_TEST6      
  314  00:E223            .close_test_session
  315                             ;end of visible region
  316  00:E223  A2 3B             ldx #$3B
  317  00:E225            .grey_line_delay
  318  00:E225  CA                dex
  319  00:E226  D0 FD             bne .grey_line_delay 
  320                             BG_CYAN
                                  stwz    color_reg
       00:E228  9C 02 04           stz    LOW_BYTE color_reg
       00:E22B  9C 03 04           stz    HIGH_BYTE color_reg
                                  stw     #%0000_000_111_000_111,color_data
       00:E22E  A9 C7              lda    LOW_BYTE #%0000_000_111_000_111
       00:E230  8D 04 04           sta    LOW_BYTE color_data
       00:E233  A9 01              lda    HIGH_BYTE #%0000_000_111_000_111
       00:E235  8D 05 04           sta    HIGH_BYTE color_data
  321  00:E238  A2 48             ldx #$48
  322  00:E23A            .blue_line_delay
  323  00:E23A  CA                dex
  324  00:E23B  D0 FD             bne .blue_line_delay 
  325                             BG_DKGRN
                                  stwz    color_reg
       00:E23D  9C 02 04           stz    LOW_BYTE color_reg
       00:E240  9C 03 04           stz    HIGH_BYTE color_reg
                                  stw     #%0000_000_101_000_000,color_data
       00:E243  A9 40              lda    LOW_BYTE #%0000_000_101_000_000
       00:E245  8D 04 04           sta    LOW_BYTE color_data
       00:E248  A9 01              lda    HIGH_BYTE #%0000_000_101_000_000
       00:E24A  8D 05 04           sta    HIGH_BYTE color_data
  326                             ; disable BG
  327                             vreg    #5      ;CR
       00:E24D  A9 05             lda     #5
       00:E24F  85 F7             sta     <_vreg
       00:E251  8D 00 00          sta     video_reg
  328                             stw             #CR_BGOFF,video_data
       00:E254  A9 4C              lda    LOW_BYTE #CR_BGOFF
       00:E256  8D 02 00           sta    LOW_BYTE video_data
       00:E259  A9 00              lda    HIGH_BYTE #CR_BGOFF
       00:E25B  8D 03 00           sta    HIGH_BYTE video_data
  329  00:E25E  60                rts             ; leave int
  330                             
  331                     ;BYR Before test
  332  00:E25F            START_TEST1:
  333                             BG_CYAN
                                  stwz    color_reg
       00:E25F  9C 02 04           stz    LOW_BYTE color_reg
       00:E262  9C 03 04           stz    HIGH_BYTE color_reg
                                  stw     #%0000_000_111_000_111,color_data
       00:E265  A9 C7              lda    LOW_BYTE #%0000_000_111_000_111
       00:E267  8D 04 04           sta    LOW_BYTE color_data
       00:E26A  A9 01              lda    HIGH_BYTE #%0000_000_111_000_111
       00:E26C  8D 05 04           sta    HIGH_BYTE color_data
  334                             vreg    #6      ;RCR
       00:E26F  A9 06             lda     #6
       00:E271  85 F7             sta     <_vreg
       00:E273  8D 00 00          sta     video_reg
  335                             stw             #BYRA_LINE,video_data
       00:E276  A9 7A              lda    LOW_BYTE #BYRA_LINE
       00:E278  8D 02 00           sta    LOW_BYTE video_data
       00:E27B  A9 00              lda    HIGH_BYTE #BYRA_LINE
       00:E27D  8D 03 00           sta    HIGH_BYTE video_data
  336                             BORD_DKBLU
                                  stw     #$0100,color_reg
       00:E280  A9 00              lda    LOW_BYTE #$0100
       00:E282  8D 02 04           sta    LOW_BYTE color_reg
       00:E285  A9 01              lda    HIGH_BYTE #$0100
       00:E287  8D 03 04           sta    HIGH_BYTE color_reg
                                  stw     #%0000_000_000_000_100,color_data
       00:E28A  A9 04              lda    LOW_BYTE #%0000_000_000_000_100
       00:E28C  8D 04 04           sta    LOW_BYTE color_data
       00:E28F  A9 00              lda    HIGH_BYTE #%0000_000_000_000_100
       00:E291  8D 05 04           sta    HIGH_BYTE color_data
  337                             ; 455 cpu cycles per scanline
  338                             ; adjust BYR to hide the red box 
  339  00:E294  A2 28             ldx #$28        ;       0x30 gives 1 * 4 cy (no loop) + 0x2F * 6 cy (loops) = 286 cy  
  340  00:E296            .byrb_delay
  341  00:E296  CA                dex
  342  00:E297  D0 FD             bne .byrb_delay 
  343                             
  344                             ;reset BYR, add nops. Reenable just before latching in second part
  345                             vreg    #8      ;BYR
       00:E299  A9 08             lda     #8
       00:E29B  85 F7             sta     <_vreg
       00:E29D  8D 00 00          sta     video_reg
  346                             stwz    video_data
       00:E2A0  9C 02 00           stz    LOW_BYTE video_data
       00:E2A3  9C 03 00           stz    HIGH_BYTE video_data
  347  00:E2A6  EA                nop
  348  00:E2A7  EA                nop
  349  00:E2A8  EA                nop     
  350                             BG_GREY2
                                  stwz    color_reg
       00:E2A9  9C 02 04           stz    LOW_BYTE color_reg
       00:E2AC  9C 03 04           stz    HIGH_BYTE color_reg
                                  stw     #%0000_000_010_010_010,color_data
       00:E2AF  A9 92              lda    LOW_BYTE #%0000_000_010_010_010
       00:E2B1  8D 04 04           sta    LOW_BYTE color_data
       00:E2B4  A9 00              lda    HIGH_BYTE #%0000_000_010_010_010
       00:E2B6  8D 05 04           sta    HIGH_BYTE color_data
  351  00:E2B9  A5 03             lda <nop_count   
  352  00:E2BB  4C DA E3          jmp INSERT_NOPS
  353                     
  354                     ;BYR After test
  355  00:E2BE            START_TEST2:
  356                             vreg    #6      ;RCR
       00:E2BE  A9 06             lda     #6
       00:E2C0  85 F7             sta     <_vreg
       00:E2C2  8D 00 00          sta     video_reg
  357                             stw             #BXRB_LINE,video_data
       00:E2C5  A9 7D              lda    LOW_BYTE #BXRB_LINE
       00:E2C7  8D 02 00           sta    LOW_BYTE video_data
       00:E2CA  A9 00              lda    HIGH_BYTE #BXRB_LINE
       00:E2CC  8D 03 00           sta    HIGH_BYTE video_data
  358  00:E2CF  A2 36             ldx #$36
  359  00:E2D1            .byra_delay
  360  00:E2D1  CA                dex
  361  00:E2D2  D0 FD             bne .byra_delay 
  362                             
  363                             ;leave BYR as it is. Add incorrect value in second part
  364  00:E2D4  EA                nop
  365  00:E2D5  EA                nop
  366  00:E2D6  EA                nop     
  367                             BG_CYAN
                                  stwz    color_reg
       00:E2D7  9C 02 04           stz    LOW_BYTE color_reg
       00:E2DA  9C 03 04           stz    HIGH_BYTE color_reg
                                  stw     #%0000_000_111_000_111,color_data
       00:E2DD  A9 C7              lda    LOW_BYTE #%0000_000_111_000_111
       00:E2DF  8D 04 04           sta    LOW_BYTE color_data
       00:E2E2  A9 01              lda    HIGH_BYTE #%0000_000_111_000_111
       00:E2E4  8D 05 04           sta    HIGH_BYTE color_data
  368  00:E2E7  A5 04             lda <nop_count + 1       
  369  00:E2E9  4C DA E3          jmp INSERT_NOPS
  370                     
  371                     ;BXR Before test
  372  00:E2EC            START_TEST3:
  373                             vreg    #6      ;RCR
       00:E2EC  A9 06             lda     #6
       00:E2EE  85 F7             sta     <_vreg
       00:E2F0  8D 00 00          sta     video_reg
  374                             stw             #BXRA_LINE,video_data
       00:E2F3  A9 80              lda    LOW_BYTE #BXRA_LINE
       00:E2F5  8D 02 00           sta    LOW_BYTE video_data
       00:E2F8  A9 00              lda    HIGH_BYTE #BXRA_LINE
       00:E2FA  8D 03 00           sta    HIGH_BYTE video_data
  375  00:E2FD  A2 2F             ldx #$2F
  376  00:E2FF            .bxrb_delay
  377  00:E2FF  CA                dex
  378  00:E300  D0 FD             bne .bxrb_delay 
  379                             
  380                             ;add BXR offset, add nop. Reset offset just before latching in second part
  381                             vreg    #7      ;BXR
       00:E302  A9 07             lda     #7
       00:E304  85 F7             sta     <_vreg
       00:E306  8D 00 00          sta     video_reg
  382                             stw             #LFT_BXR,video_data
       00:E309  A9 08              lda    LOW_BYTE #LFT_BXR
       00:E30B  8D 02 00           sta    LOW_BYTE video_data
       00:E30E  A9 00              lda    HIGH_BYTE #LFT_BXR
       00:E310  8D 03 00           sta    HIGH_BYTE video_data
  383  00:E313  EA                nop
  384  00:E314  EA                nop
  385  00:E315  EA                nop     
  386                             BG_GREY2
                                  stwz    color_reg
       00:E316  9C 02 04           stz    LOW_BYTE color_reg
       00:E319  9C 03 04           stz    HIGH_BYTE color_reg
                                  stw     #%0000_000_010_010_010,color_data
       00:E31C  A9 92              lda    LOW_BYTE #%0000_000_010_010_010
       00:E31E  8D 04 04           sta    LOW_BYTE color_data
       00:E321  A9 00              lda    HIGH_BYTE #%0000_000_010_010_010
       00:E323  8D 05 04           sta    HIGH_BYTE color_data
  387  00:E326  A5 05             lda <nop_count + 2       
  388  00:E328  4C DA E3          jmp INSERT_NOPS
  389                     
  390                     ;BXR After test
  391  00:E32B            START_TEST4:
  392                             vreg    #6      ;RCR
       00:E32B  A9 06             lda     #6
       00:E32D  85 F7             sta     <_vreg
       00:E32F  8D 00 00          sta     video_reg
  393                             stw             #CRB_LINE,video_data
       00:E332  A9 86              lda    LOW_BYTE #CRB_LINE
       00:E334  8D 02 00           sta    LOW_BYTE video_data
       00:E337  A9 00              lda    HIGH_BYTE #CRB_LINE
       00:E339  8D 03 00           sta    HIGH_BYTE video_data
  394  00:E33C  A2 32             ldx #$32
  395  00:E33E            .bxra_delay
  396  00:E33E  CA                dex
  397  00:E33F  D0 FD             bne .bxra_delay 
  398                             
  399                             ;leave BXR as it is. Add incorrect value in second part
  400  00:E341  EA                nop
  401  00:E342  EA                nop
  402  00:E343  EA                nop     
  403                             BG_CYAN
                                  stwz    color_reg
       00:E344  9C 02 04           stz    LOW_BYTE color_reg
       00:E347  9C 03 04           stz    HIGH_BYTE color_reg
                                  stw     #%0000_000_111_000_111,color_data
       00:E34A  A9 C7              lda    LOW_BYTE #%0000_000_111_000_111
       00:E34C  8D 04 04           sta    LOW_BYTE color_data
       00:E34F  A9 01              lda    HIGH_BYTE #%0000_000_111_000_111
       00:E351  8D 05 04           sta    HIGH_BYTE color_data
  404  00:E354  A5 06             lda <nop_count + 3       
  405  00:E356  4C DA E3          jmp INSERT_NOPS
  406                     
  407                     ;CR Before test
  408  00:E359            START_TEST5:
  409                             vreg    #6      ;RCR
       00:E359  A9 06             lda     #6
       00:E35B  85 F7             sta     <_vreg
       00:E35D  8D 00 00          sta     video_reg
  410                             stw             #CRA_LINE,video_data
       00:E360  A9 8A              lda    LOW_BYTE #CRA_LINE
       00:E362  8D 02 00           sta    LOW_BYTE video_data
       00:E365  A9 00              lda    HIGH_BYTE #CRA_LINE
       00:E367  8D 03 00           sta    HIGH_BYTE video_data
  411  00:E36A  A2 25             ldx #$25
  412  00:E36C            .crb_delay
  413  00:E36C  CA                dex
  414  00:E36D  D0 FD             bne .crb_delay 
  415                             ; apply new BYR value to stop at bottom of red box      
  416                             vreg    #8      ;BYR
       00:E36F  A9 08             lda     #8
       00:E371  85 F7             sta     <_vreg
       00:E373  8D 00 00          sta     video_reg
  417                             stw             #TOP_BYR,video_data
       00:E376  A9 3F              lda    LOW_BYTE #TOP_BYR
       00:E378  8D 02 00           sta    LOW_BYTE video_data
       00:E37B  A9 00              lda    HIGH_BYTE #TOP_BYR
       00:E37D  8D 03 00           sta    HIGH_BYTE video_data
  418                     
  419                             ;disable BG in CR, add nops. Renable bg in second part
  420                             vreg    #5      ;CR
       00:E380  A9 05             lda     #5
       00:E382  85 F7             sta     <_vreg
       00:E384  8D 00 00          sta     video_reg
  421                             stw             #CR_BGOFF,video_data
       00:E387  A9 4C              lda    LOW_BYTE #CR_BGOFF
       00:E389  8D 02 00           sta    LOW_BYTE video_data
       00:E38C  A9 00              lda    HIGH_BYTE #CR_BGOFF
       00:E38E  8D 03 00           sta    HIGH_BYTE video_data
  422  00:E391  EA                nop
  423  00:E392  EA                nop
  424  00:E393  EA                nop
  425  00:E394  EA                nop     
  426  00:E395  EA                nop     
  427                             BG_GREY2
                                  stwz    color_reg
       00:E396  9C 02 04           stz    LOW_BYTE color_reg
       00:E399  9C 03 04           stz    HIGH_BYTE color_reg
                                  stw     #%0000_000_010_010_010,color_data
       00:E39C  A9 92              lda    LOW_BYTE #%0000_000_010_010_010
       00:E39E  8D 04 04           sta    LOW_BYTE color_data
       00:E3A1  A9 00              lda    HIGH_BYTE #%0000_000_010_010_010
       00:E3A3  8D 05 04           sta    HIGH_BYTE color_data
  428  00:E3A6  A5 07             lda <nop_count + 4       
  429  00:E3A8  4C DA E3          jmp INSERT_NOPS
  430                     
  431                     ;CR After test
  432  00:E3AB            START_TEST6:
  433                             vreg    #6      ;RCR
       00:E3AB  A9 06             lda     #6
       00:E3AD  85 F7             sta     <_vreg
       00:E3AF  8D 00 00          sta     video_reg
  434                             stw             #BOT_LINE,video_data
       00:E3B2  A9 95              lda    LOW_BYTE #BOT_LINE
       00:E3B4  8D 02 00           sta    LOW_BYTE video_data
       00:E3B7  A9 00              lda    HIGH_BYTE #BOT_LINE
       00:E3B9  8D 03 00           sta    HIGH_BYTE video_data
  435  00:E3BC  A2 2D             ldx #$2D
  436  00:E3BE            .cra_delay
  437  00:E3BE  CA                dex
  438  00:E3BF  D0 FD             bne .cra_delay 
  439                             ;leave CR as it is. Add incorrect value in second part
  440  00:E3C1  EA                nop     
  441  00:E3C2  EA                nop
  442  00:E3C3  EA                nop
  443  00:E3C4  EA                nop     
  444                             BG_CYAN
                                  stwz    color_reg
       00:E3C5  9C 02 04           stz    LOW_BYTE color_reg
       00:E3C8  9C 03 04           stz    HIGH_BYTE color_reg
                                  stw     #%0000_000_111_000_111,color_data
       00:E3CB  A9 C7              lda    LOW_BYTE #%0000_000_111_000_111
       00:E3CD  8D 04 04           sta    LOW_BYTE color_data
       00:E3D0  A9 01              lda    HIGH_BYTE #%0000_000_111_000_111
       00:E3D2  8D 05 04           sta    HIGH_BYTE color_data
  445  00:E3D5  A5 08             lda <nop_count + 5       
  446  00:E3D7  4C DA E3          jmp INSERT_NOPS
  447                     
  448  00:E3DA            INSERT_NOPS:    ; load acc with corresponding number of nops for the test       
  449                             ; jump to routine corresponding to number of nops
  450  00:E3DA  0A                asl a
  451  00:E3DB  22                sax     
  452  00:E3DC  7C EC E4          jmp [cycle_routine_array,x]     ;WRONG as RTS does not work
  453                             
  454  00:E3DF            EIGHT_NOPS:
  455  00:E3DF  EA                nop             ;2cycles
  456  00:E3E0            SIX_NOPS:
  457  00:E3E0  EA                nop             ;2cycles
  458  00:E3E1            FOUR_NOPS:
  459  00:E3E1  EA                nop             ;2cycles
  460  00:E3E2            TWO_NOPS:
  461  00:E3E2  EA                nop             ;2cycles
  462  00:E3E3            ZERO_NOPS:
  463  00:E3E3  EA                nop             ;2cycles
  464  00:E3E4  4C EF E3          jmp RESUME_TESTING
  465                     
  466  00:E3E7            NINE_NOPS:
  467  00:E3E7  EA                nop             ;2cycles
  468  00:E3E8            SEVEN_NOPS:
  469  00:E3E8  EA                nop             ;2cycles
  470  00:E3E9            FIVE_NOPS:
  471  00:E3E9  EA                nop             ;2cycles
  472  00:E3EA            THREE_NOPS:
  473  00:E3EA  EA                nop             ;2cycles
  474  00:E3EB            ONE_NOP:
  475  00:E3EB  22                sax     ;3cycles
  476  00:E3EC  4C EF E3          jmp RESUME_TESTING
  477                     
  478                     
  479                     
  480  00:E3EF            RESUME_TESTING: 
  481  00:E3EF  A5 00             lda     <test_nb
  482  00:E3F1  C9 00             cmp     #BYRB_TEST
  483  00:E3F3  D0 03             bne     .check_test2
  484  00:E3F5  4C 1C E4          jmp             END_TEST1        
  485  00:E3F8            .check_test2    
  486  00:E3F8  C9 01             cmp     #BYRA_TEST
  487  00:E3FA  D0 03             bne     .check_test3
  488  00:E3FC  4C 30 E4          jmp             END_TEST2        
  489  00:E3FF            .check_test3    
  490  00:E3FF  C9 02             cmp     #BXRB_TEST
  491  00:E401  D0 03             bne     .check_test4
  492  00:E403  4C 59 E4          jmp             END_TEST3        
  493  00:E406            .check_test4    
  494  00:E406  C9 03             cmp     #BXRA_TEST
  495  00:E408  D0 03             bne     .check_test5
  496  00:E40A  4C 6D E4          jmp             END_TEST4        
  497  00:E40D            .check_test5    
  498  00:E40D  C9 04             cmp     #CRB_TEST
  499  00:E40F  D0 03             bne     .check_test6
  500  00:E411  4C 9A E4          jmp             END_TEST5        
  501  00:E414            .check_test6    
  502  00:E414  C9 05             cmp     #CRA_TEST
  503  00:E416  D0 03             bne     .close_test_session
  504  00:E418  4C AE E4          jmp             END_TEST6        
  505  00:E41B            .close_test_session
  506  00:E41B  60                rts             ; we should never get here in teory
  507                     
  508  00:E41C            END_TEST1:
  509                             ;Reenable just before latching in second part
  510                             vreg    #8      ;BYR
       00:E41C  A9 08             lda     #8
       00:E41E  85 F7             sta     <_vreg
       00:E420  8D 00 00          sta     video_reg
  511                             stw             #TOP_BYR,video_data
       00:E423  A9 3F              lda    LOW_BYTE #TOP_BYR
       00:E425  8D 02 00           sta    LOW_BYTE video_data
       00:E428  A9 00              lda    HIGH_BYTE #TOP_BYR
       00:E42A  8D 03 00           sta    HIGH_BYTE video_data
  512  00:E42D  4C E0 E4          jmp SYNC_CPU
  513  00:E430            END_TEST2:
  514                             ;Add incorrect value in second part, a few nops and renable
  515                             vreg    #8      ;BYR
       00:E430  A9 08             lda     #8
       00:E432  85 F7             sta     <_vreg
       00:E434  8D 00 00          sta     video_reg
  516                             stwz    video_data
       00:E437  9C 02 00           stz    LOW_BYTE video_data
       00:E43A  9C 03 00           stz    HIGH_BYTE video_data
  517  00:E43D  EA                nop
  518  00:E43E  EA                nop
  519  00:E43F  EA                nop
  520  00:E440  EA                nop
  521  00:E441  EA                nop
  522  00:E442  EA                nop
  523  00:E443  EA                nop
  524  00:E444  EA                nop
  525                             vreg    #8      ;BYR
       00:E445  A9 08             lda     #8
       00:E447  85 F7             sta     <_vreg
       00:E449  8D 00 00          sta     video_reg
  526                             stw             #BOT_BYR,video_data
       00:E44C  A9 43              lda    LOW_BYTE #BOT_BYR
       00:E44E  8D 02 00           sta    LOW_BYTE video_data
       00:E451  A9 00              lda    HIGH_BYTE #BOT_BYR
       00:E453  8D 03 00           sta    HIGH_BYTE video_data
  527  00:E456  4C E0 E4          jmp SYNC_CPU
  528  00:E459            END_TEST3:
  529                             ;Reset offset just before latching in second part
  530                             vreg    #7      ;BXR
       00:E459  A9 07             lda     #7
       00:E45B  85 F7             sta     <_vreg
       00:E45D  8D 00 00          sta     video_reg
  531                             stw             #$0000,video_data
       00:E460  A9 00              lda    LOW_BYTE #$0000
       00:E462  8D 02 00           sta    LOW_BYTE video_data
       00:E465  A9 00              lda    HIGH_BYTE #$0000
       00:E467  8D 03 00           sta    HIGH_BYTE video_data
  532  00:E46A  4C E0 E4          jmp SYNC_CPU
  533  00:E46D            END_TEST4:
  534                             ;Add incorrect value in second part, a few nops and correct it again
  535                             vreg    #7      ;BXR
       00:E46D  A9 07             lda     #7
       00:E46F  85 F7             sta     <_vreg
       00:E471  8D 00 00          sta     video_reg
  536                             stw         #LFT_BXR,video_data
       00:E474  A9 08              lda    LOW_BYTE #LFT_BXR
       00:E476  8D 02 00           sta    LOW_BYTE video_data
       00:E479  A9 00              lda    HIGH_BYTE #LFT_BXR
       00:E47B  8D 03 00           sta    HIGH_BYTE video_data
  537  00:E47E  EA                nop
  538  00:E47F  EA                nop
  539  00:E480  EA                nop
  540  00:E481  EA                nop
  541  00:E482  EA                nop
  542  00:E483  EA                nop
  543  00:E484  EA                nop
  544  00:E485  EA                nop
  545                             vreg    #7      ;BXR
       00:E486  A9 07             lda     #7
       00:E488  85 F7             sta     <_vreg
       00:E48A  8D 00 00          sta     video_reg
  546                             stw             #$0000,video_data
       00:E48D  A9 00              lda    LOW_BYTE #$0000
       00:E48F  8D 02 00           sta    LOW_BYTE video_data
       00:E492  A9 00              lda    HIGH_BYTE #$0000
       00:E494  8D 03 00           sta    HIGH_BYTE video_data
  547  00:E497  4C E0 E4          jmp SYNC_CPU
  548  00:E49A            END_TEST5:
  549                             ;Renable offset in second part
  550                             vreg    #5      ;CR
       00:E49A  A9 05             lda     #5
       00:E49C  85 F7             sta     <_vreg
       00:E49E  8D 00 00          sta     video_reg
  551                             stw             #CR_BGON,video_data
       00:E4A1  A9 CC              lda    LOW_BYTE #CR_BGON
       00:E4A3  8D 02 00           sta    LOW_BYTE video_data
       00:E4A6  A9 00              lda    HIGH_BYTE #CR_BGON
       00:E4A8  8D 03 00           sta    HIGH_BYTE video_data
  552  00:E4AB  4C E0 E4          jmp SYNC_CPU
  553  00:E4AE            END_TEST6:
  554                             ;Add incorrect value in second part
  555                             vreg    #5      ;CR
       00:E4AE  A9 05             lda     #5
       00:E4B0  85 F7             sta     <_vreg
       00:E4B2  8D 00 00          sta     video_reg
  556                             stw             #CR_BGOFF,video_data
       00:E4B5  A9 4C              lda    LOW_BYTE #CR_BGOFF
       00:E4B7  8D 02 00           sta    LOW_BYTE video_data
       00:E4BA  A9 00              lda    HIGH_BYTE #CR_BGOFF
       00:E4BC  8D 03 00           sta    HIGH_BYTE video_data
  557  00:E4BF  EA                nop
  558  00:E4C0  EA                nop
  559  00:E4C1  EA                nop
  560  00:E4C2  EA                nop
  561  00:E4C3  EA                nop
  562  00:E4C4  EA                nop
  563  00:E4C5  EA                nop
  564  00:E4C6  EA                nop
  565  00:E4C7  EA                nop
  566  00:E4C8  EA                nop
  567  00:E4C9  EA                nop
  568  00:E4CA  EA                nop
  569  00:E4CB  EA                nop
  570  00:E4CC  EA                nop
  571  00:E4CD  EA                nop
  572  00:E4CE  EA                nop
  573                             ;Renable offset in second part
  574                             vreg    #5      ;CR
       00:E4CF  A9 05             lda     #5
       00:E4D1  85 F7             sta     <_vreg
       00:E4D3  8D 00 00          sta     video_reg
  575                             stw             #CR_BGON,video_data
       00:E4D6  A9 CC              lda    LOW_BYTE #CR_BGON
       00:E4D8  8D 02 00           sta    LOW_BYTE video_data
       00:E4DB  A9 00              lda    HIGH_BYTE #CR_BGON
       00:E4DD  8D 03 00           sta    HIGH_BYTE video_data
  576                             ;jmp SYNC_CPU
  577                     
  578  00:E4E0            SYNC_CPU:
  579                             ;sync test based on even/odd nop cycles added 
  580  00:E4E0  A6 00             ldx     <test_nb
  581  00:E4E2  B5 03             lda             <nop_count,x
  582  00:E4E4  29 01             and     #$01
  583  00:E4E6  D0 01             bne             .leave_sync
  584  00:E4E8  22                sax
  585  00:E4E9            .leave_sync             
  586  00:E4E9  E6 00             inc     <test_nb
  587  00:E4EB  60                rts
  588                     
  589                     
  590                     
  591  00:E4EC            cycle_routine_array:
  592  00:E4EC  E3 E3             .dw ZERO_NOPS, ONE_NOP, TWO_NOPS, THREE_NOPS, FOUR_NOPS, FIVE_NOPS,...
       00:E4EE  EB E3     
       00:E4F0  E2 E3     
       00:E4F2  EA E3     
       00:E4F4  E1 E3     
       00:E4F6  E9 E3     
       00:E4F8  E0 E3     
       00:E4FA  E8 E3     
       00:E4FC  DF E3     
       00:E4FE  E7 E3     
  594                     
  595                     
  596  00:E500            nop_pos_array:
  597  00:E500  A2 00             .dw $00A2, $00A7, $00AD, $00B2, $00B8, $00BD 
       00:E502  A7 00     
       00:E504  AD 00     
       00:E506  B2 00     
       00:E508  B8 00     
       00:E50A  BD 00     
  598                     
  599                     
  600                     ;============================================================
  601                     ; Other includes / banks go here (for now)
  602                     
#[2]   INCLUDE/gfx_work.asm
  603                             .include "INCLUDE/gfx_work.asm"
    1                     ;
    2                     ; Graphics routines that I write will go here
    3                     ;
    4                     
    5  00:E50C            Clear_BAT:
    6                             vreg    #$00
       00:E50C  A9 00             lda     #$00
       00:E50E  85 F7             sta     <_vreg
       00:E510  8D 00 00          sta     video_reg
    7                             stwz    video_data
       00:E513  9C 02 00           stz    LOW_BYTE video_data
       00:E516  9C 03 00           stz    HIGH_BYTE video_data
    8                             vreg    #$02
       00:E519  A9 02             lda     #$02
       00:E51B  85 F7             sta     <_vreg
       00:E51D  8D 00 00          sta     video_reg
    9                     
   10  00:E520  A2 00             ldx     #LOW(BATWIDTH*BATHEIGHT)
   11  00:E522  A0 04             ldy     #HIGH(BATWIDTH*BATHEIGHT)
   12  00:E524            .clrlp:
   13  00:E524  13 20             st1     #$20    ;"whitespace character"
   14  00:E526  23 01             st2     #$01
   15  00:E528  CA                dex
   16  00:E529  D0 F9             bne     .clrlp
   17  00:E52B  88                dey
   18  00:E52C  D0 F6             bne     .clrlp
   19  00:E52E  60                rts
   20                     
   21                     
   22  00:E52F            Print_Byte:     ;Prints a byte as HEX
   23  00:E52F  48                pha
   24  00:E530  4A                lsr a
   25  00:E531  4A                lsr a
   26  00:E532  4A                lsr a
   27  00:E533  4A                lsr a
   28                                     ;store char # (0-F) of high nyb
   29  00:E534  09 90             ora     #LOW(HEX_VRAM/16)
   30  00:E536  8D 02 00          sta     video_data
   31  00:E539  A9 10             lda     #$10+(HEX_VRAM/4096) ;font pal + tile no.
   32  00:E53B  8D 03 00          sta     video_data+1
   33  00:E53E  68                pla
   34  00:E53F            Print_Nyb:
   35  00:E53F  48                pha
   36  00:E540  29 0F             and     #$0F    ;isolate low nyb.
   37  00:E542  09 90             ora     #LOW(HEX_VRAM/16)
   38  00:E544  8D 02 00          sta     video_data
   39  00:E547  A9 10             lda     #$10+(HEX_VRAM/4096) ;font pal + tile no.
   40  00:E549  8D 03 00          sta     video_data+1
   41  00:E54C  68                pla
   42  00:E54D  60                rts
   43                     
   44                     
   45                     
   46                     
   47  00:E54E            Print_Text:                     ;_si points to zero-terminated text
   48  00:E54E  20 99 FE          jsr     set_write       ;_di points to VRAM add.
   49  00:E551            Print_Tex2:
   50  00:E551  C2                cly
   51  00:E552  A2 00             ldx     #$00+(ASCII_VRAM/4096)  ;Palette 0, $1000 VRAM
   52  00:E554            .loop1:
   53  00:E554  B1 EE             lda     [_si],Y
   54  00:E556  F0 0E             beq     .finish
   55  00:E558  8D 02 00          sta     video_data
   56  00:E55B  8E 03 00          stx     video_data+1
   57                             incw    <_si
       00:E55E  E6 EE              inc    <_si              ; value at stated memory
       00:E560  D0 02              bne    .x_00127           ; location
       00:E562  E6 EF              inc    <_si+1
       00:E564            .x_00127:
   58  00:E564  80 EE             bra     .loop1
   59  00:E566            .finish:
   60  00:E566  60                rts
   61                     
   62                     
#[1]   cr_byr_bxr_latching_test.asm
  604                     ;============================================================
  605                     ;============================================================
  606                     
  607           0002              .bank $2
  608           4000              .org $4000
  609  02:4000            FontPal: .incbin "INCLUDE/parofont.pal"
  610  02:4020            Tiles:   .incbin "INCLUDE/parofont.tiles"
  611  02:5020            BonkPal: .incbin "INCLUDE/bonkBG.pal"
  612  02:5040            BonkTiles:   .incbin "INCLUDE/bonkBG.tiles"
  613  02:5440            Tilemap: .incbin "INCLUDE/NewTilemap.tilemap"
  614                     
  615                     
  616                     ;BonkBG: .incchr "INCLUDE/bonkBG.pcx"
