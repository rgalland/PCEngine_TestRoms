#[1]   cr_byr_bxr_latching_test.asm
   11                     ;--------------- END INCLUDES ------------------
   12                     
   13           0077      BYRB_LINE       = $0077
   14           007A      BYRA_LINE       = $007A
   15           007D      BXRB_LINE       = $007D
   16           0080      BXRA_LINE       = $0080
   17           0086      CRB_LINE        = $0086
   18           008A      CRA_LINE        = $008A
   19           0095      BOT_LINE        = $0095
   20                     
   21           005A      TOP_BYR         = $005A
   22           005E      BOT_BYR         = $005E
   23                     
   24           0008      LFT_BXR         = $0008
   25                     
   26           00CC      CR_BGON         = $00CC
   27           004C      CR_BGOFF        = $004C
   28                     
   29                     
   30           0001      BYRB_TEST   = $01
   31           0002      BYRA_TEST   = $02
   32           0003      BXRB_TEST   = $03
   33           0004      BXRA_TEST   = $04
   34           0005      CRB_TEST    = $05
   35           0006      CRA_TEST    = $06
   36                     
   37                     ;PAD 
   38           0010      PAD_UP          = $10
   39           0020      PAD_RIGHT       = $20
   40           0040      PAD_DOWN        = $40
   41           0080      PAD_LEFT        = $80
   42           0001      PAD_I           = $01
   43           0002      PAD_II          = $02
   44                     
   45                     
   46           0006      NOP_ARRAY_LEN = $06
   47           0009      NOPS_MAX      = $09     ; 10 possible values
   48                     
   49                     
   50           1000      ASCII_VRAM      = $1000
   51           1100      HEX_VRAM        = ASCII_VRAM+$100
   52           2000      BONKBG_VRAM     = $2000
   53           3000      BONKSP_VRAM     = $3000
   54                     
   55           0F00      SATB_VRAM       = $0F00         ;where to put the Sprite Table in VRAM
   56                     
   57           0020      BATWIDTH        = 32    ;Set to 32, 64, or 128
   58           0020      BATHEIGHT       = 32    ;Set to 32 or 64.
   59                     
   60                     
   61                     
   62                     ; Zero-page variables
   63           2000              .zp
   64  --:2000            hsync_line:     .ds 2
   65  --:2002            test_nb:        .ds 1
   66  --:2003            pad_prev:   .ds 1
   67  --:2004            pad_cur:    .ds 1
   68  --:2005            nop_count:  .ds 6       ; array of 6 values
   69  --:200B            nop_index:  .ds 1       ; index nop_count array 0-5
   70  --:200C            nop_pos:    .ds 2       ; getvalues from nop pos array
   71                     
   72                     
   73                     ;==============================
   74           0000              .code
   75           0000              .bank   $0
   76           E000              .org    $E000
   77                     
   78                     
   79  00:E000            MAIN:
   80                             INTS_OFF                ;DISABLE INTERRUPTS!
       00:E000  03 05             st0  #5
       00:E002  13 00             st1   #$00
       00:E004  23 00             st2   #$00
   81                             
   82  00:E006  64 0B             stz <nop_index
   83  00:E008  A2 06             ldx #NOP_ARRAY_LEN
   84                     
   85  00:E00A            .clear_nop_count_array  
   86  00:E00A  CA                dex
   87  00:E00B  74 05             stz <nop_count, x
   88  00:E00D  D0 FB             bne .clear_nop_count_array      
   89                             
   90  00:E00F  64 03             stz <pad_prev
   91  00:E011  64 02             stz     <test_nb
   92                             stw     #BYRB_LINE,<hsync_line
       00:E013  A9 77              lda    LOW_BYTE #BYRB_LINE
       00:E015  85 00              sta    LOW_BYTE <hsync_line
       00:E017  A9 00              lda    HIGH_BYTE #BYRB_LINE
       00:E019  85 01              sta    HIGH_BYTE <hsync_line
   93                     
   94                             map     BonkBG
       00:E01B  A9 03              lda   #bank(BonkBG)        ; addressable memory
       00:E01D  53 04              tam   #page(BonkBG)
   95                             vload   BONKBG_VRAM, BonkBG, $1000
                0001              .if (3 = 3)
                                   stw   #BONKBG_VRAM,<_di
       00:E01F  A9 00              lda    LOW_BYTE #BONKBG_VRAM
       00:E021  85 F0              sta    LOW_BYTE <_di
       00:E023  A9 20              lda    HIGH_BYTE #BONKBG_VRAM
       00:E025  85 F1              sta    HIGH_BYTE <_di
                                   stw   #BonkBG,<_si
       00:E027  A9 00              lda    LOW_BYTE #BonkBG
       00:E029  85 EE              sta    LOW_BYTE <_si
       00:E02B  A9 40              lda    HIGH_BYTE #BonkBG
       00:E02D  85 EF              sta    HIGH_BYTE <_si
                                   stw   #$1000,<_cx     ;WTF is this??? ERRORS!!! "stw   $1000,<_cx"
       00:E02F  A9 00              lda    LOW_BYTE #$1000
       00:E031  85 FC              sta    LOW_BYTE <_cx
       00:E033  A9 10              lda    HIGH_BYTE #$1000
       00:E035  85 FD              sta    HIGH_BYTE <_cx
                                  .else
                                  .endif
       00:E037  20 58 FE           jsr   load_vram
   96                             map             MyFont
       00:E03A  A9 02              lda   #bank(MyFont)        ; addressable memory
       00:E03C  53 04              tam   #page(MyFont)
   97                             vload   ASCII_VRAM, MyFont, $0800
                0001              .if (3 = 3)
                                   stw   #ASCII_VRAM,<_di
       00:E03E  A9 00              lda    LOW_BYTE #ASCII_VRAM
       00:E040  85 F0              sta    LOW_BYTE <_di
       00:E042  A9 10              lda    HIGH_BYTE #ASCII_VRAM
       00:E044  85 F1              sta    HIGH_BYTE <_di
                                   stw   #MyFont,<_si
       00:E046  A9 00              lda    LOW_BYTE #MyFont
       00:E048  85 EE              sta    LOW_BYTE <_si
       00:E04A  A9 40              lda    HIGH_BYTE #MyFont
       00:E04C  85 EF              sta    HIGH_BYTE <_si
                                   stw   #$0800,<_cx     ;WTF is this??? ERRORS!!! "stw   $0800,<_cx"
       00:E04E  A9 00              lda    LOW_BYTE #$0800
       00:E050  85 FC              sta    LOW_BYTE <_cx
       00:E052  A9 08              lda    HIGH_BYTE #$0800
       00:E054  85 FD              sta    HIGH_BYTE <_cx
                                  .else
                                  .endif
       00:E056  20 58 FE           jsr   load_vram
   98                             vload   BONKSP_VRAM, SprCHR, $0200      ;Load 2 32x32 sprites
                0001              .if (3 = 3)
                                   stw   #BONKSP_VRAM,<_di
       00:E059  A9 00              lda    LOW_BYTE #BONKSP_VRAM
       00:E05B  85 F0              sta    LOW_BYTE <_di
       00:E05D  A9 30              lda    HIGH_BYTE #BONKSP_VRAM
       00:E05F  85 F1              sta    HIGH_BYTE <_di
                                   stw   #SprCHR,<_si
       00:E061  A9 00              lda    LOW_BYTE #SprCHR
       00:E063  85 EE              sta    LOW_BYTE <_si
       00:E065  A9 50              lda    HIGH_BYTE #SprCHR
       00:E067  85 EF              sta    HIGH_BYTE <_si
                                   stw   #$0200,<_cx     ;WTF is this??? ERRORS!!! "stw   $0200,<_cx"
       00:E069  A9 00              lda    LOW_BYTE #$0200
       00:E06B  85 FC              sta    LOW_BYTE <_cx
       00:E06D  A9 02              lda    HIGH_BYTE #$0200
       00:E06F  85 FD              sta    HIGH_BYTE <_cx
                                  .else
                                  .endif
       00:E071  20 58 FE           jsr   load_vram
   99                     
  100                             set_bgpal       #0, FontPal, #2
       00:E074  A9 00              lda   #0
       00:E076  85 F8              sta   <_al
                                   stw   #FontPal,<_si
       00:E078  A9 00              lda    LOW_BYTE #FontPal
       00:E07A  85 EE              sta    LOW_BYTE <_si
       00:E07C  A9 54              lda    HIGH_BYTE #FontPal
       00:E07E  85 EF              sta    HIGH_BYTE <_si
                0002              .if 2
       00:E080  A9 02              lda   #2
                                  .else
                                  .endif
       00:E082  85 FC              sta   <_cl
       00:E084  20 00 FE           jsr   set_palette
  101                             set_sprpal      #0, SPRPal, #1
       00:E087  A9 00              lda   #0
                                   add   #16
                0000              .if (1 = 2)            ; register A (handle carry
                                  .else
       00:E089  18                 clc
       00:E08A  69 10              adc    #16
                                  .endif
       00:E08C  85 F8              sta   <_al
                                   stw   #SPRPal,<_si
       00:E08E  A9 40              lda    LOW_BYTE #SPRPal
       00:E090  85 EE              sta    LOW_BYTE <_si
       00:E092  A9 54              lda    HIGH_BYTE #SPRPal
       00:E094  85 EF              sta    HIGH_BYTE <_si
                0002              .if 2
       00:E096  A9 01              lda   #1
                                  .else
                                  .endif
       00:E098  85 FC              sta   <_cl
       00:E09A  20 00 FE           jsr   set_palette
  102                     
  103  00:E09D  20 B6 E5          jsr     Clear_BAT
  104                     
  105                             stw     #Intro_Text,<_si ;Point to text string
       00:E0A0  A9 15              lda    LOW_BYTE #Intro_Text
       00:E0A2  85 EE              sta    LOW_BYTE <_si
       00:E0A4  A9 E5              lda    HIGH_BYTE #Intro_Text
       00:E0A6  85 EF              sta    HIGH_BYTE <_si
  106                             stw     #$0020,<_di      ;Point on-screen
       00:E0A8  A9 20              lda    LOW_BYTE #$0020
       00:E0AA  85 F0              sta    LOW_BYTE <_di
       00:E0AC  A9 00              lda    HIGH_BYTE #$0020
       00:E0AE  85 F1              sta    HIGH_BYTE <_di
  107  00:E0B0  20 F8 E5          jsr     Print_Text
  108                     
  109  00:E0B3  20 11 E6          jsr     Draw_BonkBG
  110                     
  111                     
  112                             BG_GREEN
                                  stwz    color_reg
       00:E0B6  9C 02 04           stz    LOW_BYTE color_reg
       00:E0B9  9C 03 04           stz    HIGH_BYTE color_reg
                                  stw     #%0000_000_111_000_000,color_data
       00:E0BC  A9 C0              lda    LOW_BYTE #%0000_000_111_000_000
       00:E0BE  8D 04 04           sta    LOW_BYTE color_data
       00:E0C1  A9 01              lda    HIGH_BYTE #%0000_000_111_000_000
       00:E0C3  8D 05 04           sta    HIGH_BYTE color_data
  113                             BORD_BLUE
                                  stw     #$0100,color_reg
       00:E0C6  A9 00              lda    LOW_BYTE #$0100
       00:E0C8  8D 02 04           sta    LOW_BYTE color_reg
       00:E0CB  A9 01              lda    HIGH_BYTE #$0100
       00:E0CD  8D 03 04           sta    HIGH_BYTE color_reg
                                  stw     #%0000_000_000_000_111,color_data
       00:E0D0  A9 07              lda    LOW_BYTE #%0000_000_000_000_111
       00:E0D2  8D 04 04           sta    LOW_BYTE color_data
       00:E0D5  A9 00              lda    HIGH_BYTE #%0000_000_000_000_111
       00:E0D7  8D 05 04           sta    HIGH_BYTE color_data
  114                             SCREEN_ON
       00:E0DA  03 05             st0  #5
       00:E0DC  13 CC             st1   #$CC
       00:E0DE  23 00             st2   #$00
  115                     
  116                             vreg    #6      ;RCR
       00:E0E0  A9 06             lda     #6
       00:E0E2  85 F7             sta     <_vreg
       00:E0E4  8D 00 00          sta     video_reg
  117                             stw             #BYRB_LINE,video_data
       00:E0E7  A9 77              lda    LOW_BYTE #BYRB_LINE
       00:E0E9  8D 02 00           sta    LOW_BYTE video_data
       00:E0EC  A9 00              lda    HIGH_BYTE #BYRB_LINE
       00:E0EE  8D 03 00           sta    HIGH_BYTE video_data
  118                             
  119                     
  120  00:E0F1            .loop                   ;Here's an infinite loop...
  121  00:E0F1  80 FE             bra     .loop
  122                     
  123                     
  124  00:E0F3            MY_VSYNC:
  125                             BORD_RED
                                  stw     #$0100,color_reg
       00:E0F3  A9 00              lda    LOW_BYTE #$0100
       00:E0F5  8D 02 04           sta    LOW_BYTE color_reg
       00:E0F8  A9 01              lda    HIGH_BYTE #$0100
       00:E0FA  8D 03 04           sta    HIGH_BYTE color_reg
                                  stw     #%0000_000_000_111_000,color_data
       00:E0FD  A9 38              lda    LOW_BYTE #%0000_000_000_111_000
       00:E0FF  8D 04 04           sta    LOW_BYTE color_data
       00:E102  A9 00              lda    HIGH_BYTE #%0000_000_000_111_000
       00:E104  8D 05 04           sta    HIGH_BYTE color_data
  126  00:E107  48                pha
  127  00:E108  68                pla
  128  00:E109  48                pha
  129  00:E10A  68                pla
  130                             BORD_BLUE
                                  stw     #$0100,color_reg
       00:E10B  A9 00              lda    LOW_BYTE #$0100
       00:E10D  8D 02 04           sta    LOW_BYTE color_reg
       00:E110  A9 01              lda    HIGH_BYTE #$0100
       00:E112  8D 03 04           sta    HIGH_BYTE color_reg
                                  stw     #%0000_000_000_000_111,color_data
       00:E115  A9 07              lda    LOW_BYTE #%0000_000_000_000_111
       00:E117  8D 04 04           sta    LOW_BYTE color_data
       00:E11A  A9 00              lda    HIGH_BYTE #%0000_000_000_000_111
       00:E11C  8D 05 04           sta    HIGH_BYTE color_data
  131                     
  132                             stw     #$007C,<_di
       00:E11F  A9 7C              lda    LOW_BYTE #$007C
       00:E121  85 F0              sta    LOW_BYTE <_di
       00:E123  A9 00              lda    HIGH_BYTE #$007C
       00:E125  85 F1              sta    HIGH_BYTE <_di
  133  00:E127  20 99 FE          jsr     set_write
  134  00:E12A  A5 01             lda     <hsync_line+1
  135  00:E12C  20 E9 E5          jsr     Print_Nyb
  136  00:E12F  A5 00             lda     <hsync_line
  137  00:E131  20 D9 E5          jsr     Print_Byte
  138                     
  139                             ; set RCR ready for next frame
  140                             vreg    #6      ;RCR    
       00:E134  A9 06             lda     #6
       00:E136  85 F7             sta     <_vreg
       00:E138  8D 00 00          sta     video_reg
  141                             stw     #BYRB_LINE,video_data
       00:E13B  A9 77              lda    LOW_BYTE #BYRB_LINE
       00:E13D  8D 02 00           sta    LOW_BYTE video_data
       00:E140  A9 00              lda    HIGH_BYTE #BYRB_LINE
       00:E142  8D 03 00           sta    HIGH_BYTE video_data
  142                     
  143                             ; reset BYR
  144                             vreg    #8      ;BYR
       00:E145  A9 08             lda     #8
       00:E147  85 F7             sta     <_vreg
       00:E149  8D 00 00          sta     video_reg
  145                             stwz    video_data
       00:E14C  9C 02 00           stz    LOW_BYTE video_data
       00:E14F  9C 03 00           stz    HIGH_BYTE video_data
  146                             
  147                             ; reset BXR
  148                             vreg    #7      ;BXR
       00:E152  A9 07             lda     #7
       00:E154  85 F7             sta     <_vreg
       00:E156  8D 00 00          sta     video_reg
  149                             stwz    video_data
       00:E159  9C 02 00           stz    LOW_BYTE video_data
       00:E15C  9C 03 00           stz    HIGH_BYTE video_data
  150                             
  151                             ; reenable BG
  152                             vreg    #5      ;CR
       00:E15F  A9 05             lda     #5
       00:E161  85 F7             sta     <_vreg
       00:E163  8D 00 00          sta     video_reg
  153                             stw             #CR_BGON,video_data
       00:E166  A9 CC              lda    LOW_BYTE #CR_BGON
       00:E168  8D 02 00           sta    LOW_BYTE video_data
       00:E16B  A9 00              lda    HIGH_BYTE #CR_BGON
       00:E16D  8D 03 00           sta    HIGH_BYTE video_data
  154                             
  155  00:E170  64 02             stz     <test_nb
  156                             
  157                     
  158                     ; pad reg $1000
  159                     ;SEL = 0                SEL = 1
  160                     ;D3 :   Run             Left
  161                     ;D2 :   Select          Down
  162                     ;D1 :   Button II       Right
  163                     ;D0 :   Button I        Up      
  164                     ;read pad
  165                     ; read pad direction
  166  00:E172  A2 01             ldx #$01
  167  00:E174  8E 00 10          stx $1000
  168  00:E177  A2 03             ldx #$03
  169  00:E179  8E 00 10          stx $1000
  170  00:E17C  A2 01             ldx #$01
  171  00:E17E  8E 00 10          stx $1000
  172  00:E181  AD 00 10          lda $1000
  173  00:E184  0A                asl a
  174  00:E185  0A                asl a
  175  00:E186  0A                asl a
  176  00:E187  0A                asl a
  177  00:E188  85 04             sta <pad_cur
  178                     ; read pad buttons
  179  00:E18A  82                clx
  180  00:E18B  8E 00 10          stx $1000
  181  00:E18E  A2 02             ldx #$02
  182  00:E190  8E 00 10          stx $1000
  183  00:E193  82                clx
  184  00:E194  8E 00 10          stx $1000
  185  00:E197  AD 00 10          lda $1000
  186  00:E19A  29 0F             and #$0F
  187  00:E19C  05 04             ora <pad_cur
  188  00:E19E  49 FF             eor #$FF 
  189  00:E1A0  85 04             sta <pad_cur
  190                     ; detect changes and only 0 to 1 transitions
  191  00:E1A2  45 03             eor <pad_prev
  192  00:E1A4  D0 01             bne .check_btns
  193  00:E1A6  60                rts
  194  00:E1A7            .check_btns     
  195  00:E1A7  25 04             and <pad_cur
  196  00:E1A9  A6 04             ldx <pad_cur
  197  00:E1AB  86 03             stx <pad_prev
  198  00:E1AD  A6 0B             ldx <nop_index
  199  00:E1AF  B4 05             ldy <nop_count, x
  200  00:E1B1            .check_btn_1    
  201  00:E1B1  C9 01             cmp #PAD_I
  202  00:E1B3  D0 06             bne .check_btn_2
  203  00:E1B5  C0 09             cpy #NOPS_MAX
  204  00:E1B7  F0 02             beq .check_btn_2
  205  00:E1B9  F6 05             inc <nop_count, x        
  206  00:E1BB            .check_btn_2    
  207  00:E1BB  C9 02             cmp #PAD_II
  208  00:E1BD  D0 06             bne .check_btn_up
  209  00:E1BF  C0 00             cpy #$00
  210  00:E1C1  F0 02             beq .check_btn_up
  211  00:E1C3  D6 05             dec <nop_count, x
  212  00:E1C5            .check_btn_up
  213  00:E1C5  C9 10             cmp #PAD_UP
  214  00:E1C7  D0 06             bne .check_btn_down
  215  00:E1C9  E0 05             cpx #NOP_ARRAY_LEN - 1
  216  00:E1CB  F0 02             beq .check_btn_down
  217  00:E1CD  E6 0B             inc <nop_index
  218  00:E1CF            .check_btn_down
  219  00:E1CF  C9 40             cmp #PAD_DOWN
  220  00:E1D1  D0 0A             bne .end_btn_checks
  221  00:E1D3  E0 00             cpx #$00
  222  00:E1D5  F0 06             beq .end_btn_checks
  223  00:E1D7  C6 0B             dec <nop_index
  224                     
  225                     ; check right   
  226  00:E1D9  C9 20             cmp #PAD_RIGHT
  227                     
  228                     ; check left    
  229  00:E1DB  C9 80             cmp #PAD_LEFT
  230                                     
  231                             
  232  00:E1DD            .end_btn_checks
  233                     
  234                             ;stw    #$007D,<_di
  235                             ;jsr    set_write
  236                             ;lda    <nop_count
  237                             ;jsr    Print_Byte
  238                     
  239                     ; change value of the position pointed at
  240                     ; get value from pos array
  241  00:E1DD  A5 0B             lda <nop_index
  242  00:E1DF  0A                asl a
  243  00:E1E0  22                sax
  244  00:E1E1  BD 09 E5          lda nop_pos_array,x
  245  00:E1E4  85 0C             sta <nop_pos  
  246  00:E1E6  E8                inx
  247  00:E1E7  BD 09 E5          lda nop_pos_array,x
  248  00:E1EA  85 0D             sta <nop_pos + 1  
  249                     ; apply new value to position
  250  00:E1EC  A6 0B             ldx <nop_index
  251                             stw     <nop_pos,<_di
       00:E1EE  A5 0C              lda    LOW_BYTE <nop_pos
       00:E1F0  85 F0              sta    LOW_BYTE <_di
       00:E1F2  A5 0D              lda    HIGH_BYTE <nop_pos
       00:E1F4  85 F1              sta    HIGH_BYTE <_di
  252  00:E1F6  20 99 FE          jsr     set_write
  253  00:E1F9  B5 05             lda     <nop_count,x
  254  00:E1FB  20 D9 E5          jsr     Print_Byte
  255                             
  256  00:E1FE  60                rts
  257                     
  258                     
  259  00:E1FF            MY_HSYNC:
  260                             BORD_WHITE
                                  stw     #$0100,color_reg
       00:E1FF  A9 00              lda    LOW_BYTE #$0100
       00:E201  8D 02 04           sta    LOW_BYTE color_reg
       00:E204  A9 01              lda    HIGH_BYTE #$0100
       00:E206  8D 03 04           sta    HIGH_BYTE color_reg
                                  stw     #%0000_000_111_111_111,color_data
       00:E209  A9 FF              lda    LOW_BYTE #%0000_000_111_111_111
       00:E20B  8D 04 04           sta    LOW_BYTE color_data
       00:E20E  A9 01              lda    HIGH_BYTE #%0000_000_111_111_111
       00:E210  8D 05 04           sta    HIGH_BYTE color_data
  261                             ;BG_CYAN
  262                             ; load current test_nb value and inc for next time
  263  00:E213  E6 02             inc     <test_nb
  264  00:E215  A5 02             lda     <test_nb
  265  00:E217  C9 01             cmp     #BYRB_TEST
  266  00:E219  D0 03             bne     .check_test2
  267  00:E21B  4C 7D E2          jmp             START_TEST1      
  268  00:E21E            .check_test2    
  269  00:E21E  C9 02             cmp     #BYRA_TEST
  270  00:E220  D0 03             bne     .check_test3
  271  00:E222  4C DC E2          jmp             START_TEST2      
  272  00:E225            .check_test3    
  273  00:E225  C9 03             cmp     #BXRB_TEST
  274  00:E227  D0 03             bne     .check_test4
  275  00:E229  4C 0A E3          jmp             START_TEST3      
  276  00:E22C            .check_test4    
  277  00:E22C  C9 04             cmp     #BXRA_TEST
  278  00:E22E  D0 03             bne     .check_test5
  279  00:E230  4C 49 E3          jmp             START_TEST4      
  280  00:E233            .check_test5    
  281  00:E233  C9 05             cmp     #CRB_TEST
  282  00:E235  D0 03             bne     .check_test6
  283  00:E237  4C 77 E3          jmp             START_TEST5      
  284  00:E23A            .check_test6    
  285  00:E23A  C9 06             cmp     #CRA_TEST
  286  00:E23C  D0 03             bne     .close_test_session
  287  00:E23E  4C C9 E3          jmp             START_TEST6      
  288  00:E241            .close_test_session
  289                             ;end of visible region
  290  00:E241  A2 3B             ldx #$3B
  291  00:E243            .grey_line_delay
  292  00:E243  CA                dex
  293  00:E244  D0 FD             bne .grey_line_delay 
  294                             BG_CYAN
                                  stwz    color_reg
       00:E246  9C 02 04           stz    LOW_BYTE color_reg
       00:E249  9C 03 04           stz    HIGH_BYTE color_reg
                                  stw     #%0000_000_111_000_111,color_data
       00:E24C  A9 C7              lda    LOW_BYTE #%0000_000_111_000_111
       00:E24E  8D 04 04           sta    LOW_BYTE color_data
       00:E251  A9 01              lda    HIGH_BYTE #%0000_000_111_000_111
       00:E253  8D 05 04           sta    HIGH_BYTE color_data
  295  00:E256  A2 48             ldx #$48
  296  00:E258            .blue_line_delay
  297  00:E258  CA                dex
  298  00:E259  D0 FD             bne .blue_line_delay 
  299                             BG_DKGRN
                                  stwz    color_reg
       00:E25B  9C 02 04           stz    LOW_BYTE color_reg
       00:E25E  9C 03 04           stz    HIGH_BYTE color_reg
                                  stw     #%0000_000_101_000_000,color_data
       00:E261  A9 40              lda    LOW_BYTE #%0000_000_101_000_000
       00:E263  8D 04 04           sta    LOW_BYTE color_data
       00:E266  A9 01              lda    HIGH_BYTE #%0000_000_101_000_000
       00:E268  8D 05 04           sta    HIGH_BYTE color_data
  300                             ; disable BG
  301                             vreg    #5      ;CR
       00:E26B  A9 05             lda     #5
       00:E26D  85 F7             sta     <_vreg
       00:E26F  8D 00 00          sta     video_reg
  302                             stw             #CR_BGOFF,video_data
       00:E272  A9 4C              lda    LOW_BYTE #CR_BGOFF
       00:E274  8D 02 00           sta    LOW_BYTE video_data
       00:E277  A9 00              lda    HIGH_BYTE #CR_BGOFF
       00:E279  8D 03 00           sta    HIGH_BYTE video_data
  303  00:E27C  60                rts             ; leave int
  304                             
  305                     ;BYR Before test
  306  00:E27D            START_TEST1:
  307                             BG_CYAN
                                  stwz    color_reg
       00:E27D  9C 02 04           stz    LOW_BYTE color_reg
       00:E280  9C 03 04           stz    HIGH_BYTE color_reg
                                  stw     #%0000_000_111_000_111,color_data
       00:E283  A9 C7              lda    LOW_BYTE #%0000_000_111_000_111
       00:E285  8D 04 04           sta    LOW_BYTE color_data
       00:E288  A9 01              lda    HIGH_BYTE #%0000_000_111_000_111
       00:E28A  8D 05 04           sta    HIGH_BYTE color_data
  308                             vreg    #6      ;RCR
       00:E28D  A9 06             lda     #6
       00:E28F  85 F7             sta     <_vreg
       00:E291  8D 00 00          sta     video_reg
  309                             stw             #BYRA_LINE,video_data
       00:E294  A9 7A              lda    LOW_BYTE #BYRA_LINE
       00:E296  8D 02 00           sta    LOW_BYTE video_data
       00:E299  A9 00              lda    HIGH_BYTE #BYRA_LINE
       00:E29B  8D 03 00           sta    HIGH_BYTE video_data
  310                             BORD_DKBLU
                                  stw     #$0100,color_reg
       00:E29E  A9 00              lda    LOW_BYTE #$0100
       00:E2A0  8D 02 04           sta    LOW_BYTE color_reg
       00:E2A3  A9 01              lda    HIGH_BYTE #$0100
       00:E2A5  8D 03 04           sta    HIGH_BYTE color_reg
                                  stw     #%0000_000_000_000_100,color_data
       00:E2A8  A9 04              lda    LOW_BYTE #%0000_000_000_000_100
       00:E2AA  8D 04 04           sta    LOW_BYTE color_data
       00:E2AD  A9 00              lda    HIGH_BYTE #%0000_000_000_000_100
       00:E2AF  8D 05 04           sta    HIGH_BYTE color_data
  311                             ; 455 cpu cycles per scanline
  312                             ; adjust BYR to hide the red box 
  313  00:E2B2  A2 27             ldx #$27        ;       0x30 gives 1 * 4 cy (no loop) + 0x2F * 6 cy (loops) = 286 cy  
  314  00:E2B4            .byrb_delay
  315  00:E2B4  CA                dex
  316  00:E2B5  D0 FD             bne .byrb_delay 
  317                             
  318                             ;reset BYR, add nops. Reenable just before latching in second part
  319                             vreg    #8      ;BYR
       00:E2B7  A9 08             lda     #8
       00:E2B9  85 F7             sta     <_vreg
       00:E2BB  8D 00 00          sta     video_reg
  320                             stwz    video_data
       00:E2BE  9C 02 00           stz    LOW_BYTE video_data
       00:E2C1  9C 03 00           stz    HIGH_BYTE video_data
  321  00:E2C4  EA                nop
  322  00:E2C5  EA                nop
  323  00:E2C6  EA                nop     
  324                             BG_GREY2
                                  stwz    color_reg
       00:E2C7  9C 02 04           stz    LOW_BYTE color_reg
       00:E2CA  9C 03 04           stz    HIGH_BYTE color_reg
                                  stw     #%0000_000_010_010_010,color_data
       00:E2CD  A9 92              lda    LOW_BYTE #%0000_000_010_010_010
       00:E2CF  8D 04 04           sta    LOW_BYTE color_data
       00:E2D2  A9 00              lda    HIGH_BYTE #%0000_000_010_010_010
       00:E2D4  8D 05 04           sta    HIGH_BYTE color_data
  325  00:E2D7  A5 05             lda <nop_count   
  326  00:E2D9  4C E0 E4          jmp INSERT_NOPS
  327                     
  328                     ;BYR After test
  329  00:E2DC            START_TEST2:
  330                             vreg    #6      ;RCR
       00:E2DC  A9 06             lda     #6
       00:E2DE  85 F7             sta     <_vreg
       00:E2E0  8D 00 00          sta     video_reg
  331                             stw             #BXRB_LINE,video_data
       00:E2E3  A9 7D              lda    LOW_BYTE #BXRB_LINE
       00:E2E5  8D 02 00           sta    LOW_BYTE video_data
       00:E2E8  A9 00              lda    HIGH_BYTE #BXRB_LINE
       00:E2EA  8D 03 00           sta    HIGH_BYTE video_data
  332  00:E2ED  A2 35             ldx #$35
  333  00:E2EF            .byra_delay
  334  00:E2EF  CA                dex
  335  00:E2F0  D0 FD             bne .byra_delay 
  336                             
  337                             ;leave BYR as it is. Add incorrect value in second part
  338  00:E2F2  EA                nop
  339  00:E2F3  EA                nop
  340  00:E2F4  EA                nop     
  341                             BG_CYAN
                                  stwz    color_reg
       00:E2F5  9C 02 04           stz    LOW_BYTE color_reg
       00:E2F8  9C 03 04           stz    HIGH_BYTE color_reg
                                  stw     #%0000_000_111_000_111,color_data
       00:E2FB  A9 C7              lda    LOW_BYTE #%0000_000_111_000_111
       00:E2FD  8D 04 04           sta    LOW_BYTE color_data
       00:E300  A9 01              lda    HIGH_BYTE #%0000_000_111_000_111
       00:E302  8D 05 04           sta    HIGH_BYTE color_data
  342  00:E305  A5 06             lda <nop_count + 1       
  343  00:E307  4C E0 E4          jmp INSERT_NOPS
  344                     
  345                     ;BXR Before test
  346  00:E30A            START_TEST3:
  347                             vreg    #6      ;RCR
       00:E30A  A9 06             lda     #6
       00:E30C  85 F7             sta     <_vreg
       00:E30E  8D 00 00          sta     video_reg
  348                             stw             #BXRA_LINE,video_data
       00:E311  A9 80              lda    LOW_BYTE #BXRA_LINE
       00:E313  8D 02 00           sta    LOW_BYTE video_data
       00:E316  A9 00              lda    HIGH_BYTE #BXRA_LINE
       00:E318  8D 03 00           sta    HIGH_BYTE video_data
  349  00:E31B  A2 2E             ldx #$2E
  350  00:E31D            .bxrb_delay
  351  00:E31D  CA                dex
  352  00:E31E  D0 FD             bne .bxrb_delay 
  353                             
  354                             ;add BXR offset, add nop. Reset offset just before latching in second part
  355                             vreg    #7      ;BXR
       00:E320  A9 07             lda     #7
       00:E322  85 F7             sta     <_vreg
       00:E324  8D 00 00          sta     video_reg
  356                             stw             #LFT_BXR,video_data
       00:E327  A9 08              lda    LOW_BYTE #LFT_BXR
       00:E329  8D 02 00           sta    LOW_BYTE video_data
       00:E32C  A9 00              lda    HIGH_BYTE #LFT_BXR
       00:E32E  8D 03 00           sta    HIGH_BYTE video_data
  357  00:E331  EA                nop
  358  00:E332  EA                nop
  359  00:E333  EA                nop     
  360                             BG_GREY2
                                  stwz    color_reg
       00:E334  9C 02 04           stz    LOW_BYTE color_reg
       00:E337  9C 03 04           stz    HIGH_BYTE color_reg
                                  stw     #%0000_000_010_010_010,color_data
       00:E33A  A9 92              lda    LOW_BYTE #%0000_000_010_010_010
       00:E33C  8D 04 04           sta    LOW_BYTE color_data
       00:E33F  A9 00              lda    HIGH_BYTE #%0000_000_010_010_010
       00:E341  8D 05 04           sta    HIGH_BYTE color_data
  361  00:E344  A5 07             lda <nop_count + 2       
  362  00:E346  4C E0 E4          jmp INSERT_NOPS
  363                     
  364                     ;BXR After test
  365  00:E349            START_TEST4:
  366                             vreg    #6      ;RCR
       00:E349  A9 06             lda     #6
       00:E34B  85 F7             sta     <_vreg
       00:E34D  8D 00 00          sta     video_reg
  367                             stw             #CRB_LINE,video_data
       00:E350  A9 86              lda    LOW_BYTE #CRB_LINE
       00:E352  8D 02 00           sta    LOW_BYTE video_data
       00:E355  A9 00              lda    HIGH_BYTE #CRB_LINE
       00:E357  8D 03 00           sta    HIGH_BYTE video_data
  368  00:E35A  A2 31             ldx #$31
  369  00:E35C            .bxra_delay
  370  00:E35C  CA                dex
  371  00:E35D  D0 FD             bne .bxra_delay 
  372                             
  373                             ;leave BXR as it is. Add incorrect value in second part
  374  00:E35F  EA                nop
  375  00:E360  EA                nop
  376  00:E361  EA                nop     
  377                             BG_CYAN
                                  stwz    color_reg
       00:E362  9C 02 04           stz    LOW_BYTE color_reg
       00:E365  9C 03 04           stz    HIGH_BYTE color_reg
                                  stw     #%0000_000_111_000_111,color_data
       00:E368  A9 C7              lda    LOW_BYTE #%0000_000_111_000_111
       00:E36A  8D 04 04           sta    LOW_BYTE color_data
       00:E36D  A9 01              lda    HIGH_BYTE #%0000_000_111_000_111
       00:E36F  8D 05 04           sta    HIGH_BYTE color_data
  378  00:E372  A5 08             lda <nop_count + 3       
  379  00:E374  4C E0 E4          jmp INSERT_NOPS
  380                     
  381                     ;CR Before test
  382  00:E377            START_TEST5:
  383                             vreg    #6      ;RCR
       00:E377  A9 06             lda     #6
       00:E379  85 F7             sta     <_vreg
       00:E37B  8D 00 00          sta     video_reg
  384                             stw             #CRA_LINE,video_data
       00:E37E  A9 8A              lda    LOW_BYTE #CRA_LINE
       00:E380  8D 02 00           sta    LOW_BYTE video_data
       00:E383  A9 00              lda    HIGH_BYTE #CRA_LINE
       00:E385  8D 03 00           sta    HIGH_BYTE video_data
  385  00:E388  A2 24             ldx #$24
  386  00:E38A            .crb_delay
  387  00:E38A  CA                dex
  388  00:E38B  D0 FD             bne .crb_delay 
  389                             ; apply new BYR value to stop at bottom of red box      
  390                             vreg    #8      ;BYR
       00:E38D  A9 08             lda     #8
       00:E38F  85 F7             sta     <_vreg
       00:E391  8D 00 00          sta     video_reg
  391                             stw             #TOP_BYR,video_data
       00:E394  A9 5A              lda    LOW_BYTE #TOP_BYR
       00:E396  8D 02 00           sta    LOW_BYTE video_data
       00:E399  A9 00              lda    HIGH_BYTE #TOP_BYR
       00:E39B  8D 03 00           sta    HIGH_BYTE video_data
  392                     
  393                             ;disable BG in CR, add nops. Renable bg in second part
  394                             vreg    #5      ;CR
       00:E39E  A9 05             lda     #5
       00:E3A0  85 F7             sta     <_vreg
       00:E3A2  8D 00 00          sta     video_reg
  395                             stw             #CR_BGOFF,video_data
       00:E3A5  A9 4C              lda    LOW_BYTE #CR_BGOFF
       00:E3A7  8D 02 00           sta    LOW_BYTE video_data
       00:E3AA  A9 00              lda    HIGH_BYTE #CR_BGOFF
       00:E3AC  8D 03 00           sta    HIGH_BYTE video_data
  396  00:E3AF  EA                nop
  397  00:E3B0  EA                nop
  398  00:E3B1  EA                nop
  399  00:E3B2  EA                nop     
  400  00:E3B3  EA                nop     
  401                             BG_GREY2
                                  stwz    color_reg
       00:E3B4  9C 02 04           stz    LOW_BYTE color_reg
       00:E3B7  9C 03 04           stz    HIGH_BYTE color_reg
                                  stw     #%0000_000_010_010_010,color_data
       00:E3BA  A9 92              lda    LOW_BYTE #%0000_000_010_010_010
       00:E3BC  8D 04 04           sta    LOW_BYTE color_data
       00:E3BF  A9 00              lda    HIGH_BYTE #%0000_000_010_010_010
       00:E3C1  8D 05 04           sta    HIGH_BYTE color_data
  402  00:E3C4  A5 09             lda <nop_count + 4       
  403  00:E3C6  4C E0 E4          jmp INSERT_NOPS
  404                     
  405                     ;CR After test
  406  00:E3C9            START_TEST6:
  407                             vreg    #6      ;RCR
       00:E3C9  A9 06             lda     #6
       00:E3CB  85 F7             sta     <_vreg
       00:E3CD  8D 00 00          sta     video_reg
  408                             stw             #BOT_LINE,video_data
       00:E3D0  A9 95              lda    LOW_BYTE #BOT_LINE
       00:E3D2  8D 02 00           sta    LOW_BYTE video_data
       00:E3D5  A9 00              lda    HIGH_BYTE #BOT_LINE
       00:E3D7  8D 03 00           sta    HIGH_BYTE video_data
  409  00:E3DA  A2 2C             ldx #$2C
  410  00:E3DC            .cra_delay
  411  00:E3DC  CA                dex
  412  00:E3DD  D0 FD             bne .cra_delay 
  413                             ;leave CR as it is. Add incorrect value in second part
  414  00:E3DF  EA                nop     
  415  00:E3E0  EA                nop
  416  00:E3E1  EA                nop
  417  00:E3E2  EA                nop     
  418                             BG_CYAN
                                  stwz    color_reg
       00:E3E3  9C 02 04           stz    LOW_BYTE color_reg
       00:E3E6  9C 03 04           stz    HIGH_BYTE color_reg
                                  stw     #%0000_000_111_000_111,color_data
       00:E3E9  A9 C7              lda    LOW_BYTE #%0000_000_111_000_111
       00:E3EB  8D 04 04           sta    LOW_BYTE color_data
       00:E3EE  A9 01              lda    HIGH_BYTE #%0000_000_111_000_111
       00:E3F0  8D 05 04           sta    HIGH_BYTE color_data
  419  00:E3F3  A5 0A             lda <nop_count + 5       
  420  00:E3F5  4C E0 E4          jmp INSERT_NOPS
  421                     
  422  00:E3F8            RESUME_TESTING: 
  423  00:E3F8  A5 02             lda     <test_nb
  424  00:E3FA  C9 01             cmp     #BYRB_TEST
  425  00:E3FC  D0 03             bne     .check_test2
  426  00:E3FE  4C 25 E4          jmp             END_TEST1        
  427  00:E401            .check_test2    
  428  00:E401  C9 02             cmp     #BYRA_TEST
  429  00:E403  D0 03             bne     .check_test3
  430  00:E405  4C 37 E4          jmp             END_TEST2        
  431  00:E408            .check_test3    
  432  00:E408  C9 03             cmp     #BXRB_TEST
  433  00:E40A  D0 03             bne     .check_test4
  434  00:E40C  4C 5E E4          jmp             END_TEST3        
  435  00:E40F            .check_test4    
  436  00:E40F  C9 04             cmp     #BXRA_TEST
  437  00:E411  D0 03             bne     .check_test5
  438  00:E413  4C 70 E4          jmp             END_TEST4        
  439  00:E416            .check_test5    
  440  00:E416  C9 05             cmp     #CRB_TEST
  441  00:E418  D0 03             bne     .check_test6
  442  00:E41A  4C 9B E4          jmp             END_TEST5        
  443  00:E41D            .check_test6    
  444  00:E41D  C9 06             cmp     #CRA_TEST
  445  00:E41F  D0 03             bne     .close_test_session
  446  00:E421  4C AD E4          jmp             END_TEST6        
  447  00:E424            .close_test_session
  448  00:E424  60                rts             ; we should never get here in teory
  449                     
  450  00:E425            END_TEST1:
  451                             ;Reenable just before latching in second part
  452                             vreg    #8      ;BYR
       00:E425  A9 08             lda     #8
       00:E427  85 F7             sta     <_vreg
       00:E429  8D 00 00          sta     video_reg
  453                             stw             #TOP_BYR,video_data
       00:E42C  A9 5A              lda    LOW_BYTE #TOP_BYR
       00:E42E  8D 02 00           sta    LOW_BYTE video_data
       00:E431  A9 00              lda    HIGH_BYTE #TOP_BYR
       00:E433  8D 03 00           sta    HIGH_BYTE video_data
  454  00:E436  60                rts
  455  00:E437            END_TEST2:
  456                             ;Add incorrect value in second part, a few nops and renable
  457                             vreg    #8      ;BYR
       00:E437  A9 08             lda     #8
       00:E439  85 F7             sta     <_vreg
       00:E43B  8D 00 00          sta     video_reg
  458                             stwz    video_data
       00:E43E  9C 02 00           stz    LOW_BYTE video_data
       00:E441  9C 03 00           stz    HIGH_BYTE video_data
  459  00:E444  EA                nop
  460  00:E445  EA                nop
  461  00:E446  EA                nop
  462  00:E447  EA                nop
  463  00:E448  EA                nop
  464  00:E449  EA                nop
  465  00:E44A  EA                nop
  466  00:E44B  EA                nop
  467                             vreg    #8      ;BYR
       00:E44C  A9 08             lda     #8
       00:E44E  85 F7             sta     <_vreg
       00:E450  8D 00 00          sta     video_reg
  468                             stw             #BOT_BYR,video_data
       00:E453  A9 5E              lda    LOW_BYTE #BOT_BYR
       00:E455  8D 02 00           sta    LOW_BYTE video_data
       00:E458  A9 00              lda    HIGH_BYTE #BOT_BYR
       00:E45A  8D 03 00           sta    HIGH_BYTE video_data
  469  00:E45D  60                rts
  470  00:E45E            END_TEST3:
  471                             ;Reset offset just before latching in second part
  472                             vreg    #7      ;BXR
       00:E45E  A9 07             lda     #7
       00:E460  85 F7             sta     <_vreg
       00:E462  8D 00 00          sta     video_reg
  473                             stw             #$0000,video_data
       00:E465  A9 00              lda    LOW_BYTE #$0000
       00:E467  8D 02 00           sta    LOW_BYTE video_data
       00:E46A  A9 00              lda    HIGH_BYTE #$0000
       00:E46C  8D 03 00           sta    HIGH_BYTE video_data
  474  00:E46F  60                rts
  475  00:E470            END_TEST4:
  476                             ;Add incorrect value in second part, a few nops and correct it again
  477                             vreg    #7      ;BXR
       00:E470  A9 07             lda     #7
       00:E472  85 F7             sta     <_vreg
       00:E474  8D 00 00          sta     video_reg
  478                             stw         #LFT_BXR,video_data
       00:E477  A9 08              lda    LOW_BYTE #LFT_BXR
       00:E479  8D 02 00           sta    LOW_BYTE video_data
       00:E47C  A9 00              lda    HIGH_BYTE #LFT_BXR
       00:E47E  8D 03 00           sta    HIGH_BYTE video_data
  479  00:E481  EA                nop
  480  00:E482  EA                nop
  481  00:E483  EA                nop
  482  00:E484  EA                nop
  483  00:E485  EA                nop
  484  00:E486  EA                nop
  485  00:E487  EA                nop
  486  00:E488  EA                nop
  487                             vreg    #7      ;BXR
       00:E489  A9 07             lda     #7
       00:E48B  85 F7             sta     <_vreg
       00:E48D  8D 00 00          sta     video_reg
  488                             stw             #$0000,video_data
       00:E490  A9 00              lda    LOW_BYTE #$0000
       00:E492  8D 02 00           sta    LOW_BYTE video_data
       00:E495  A9 00              lda    HIGH_BYTE #$0000
       00:E497  8D 03 00           sta    HIGH_BYTE video_data
  489  00:E49A  60                rts
  490  00:E49B            END_TEST5:
  491                             ;Renable offset in second part
  492                             vreg    #5      ;CR
       00:E49B  A9 05             lda     #5
       00:E49D  85 F7             sta     <_vreg
       00:E49F  8D 00 00          sta     video_reg
  493                             stw             #CR_BGON,video_data
       00:E4A2  A9 CC              lda    LOW_BYTE #CR_BGON
       00:E4A4  8D 02 00           sta    LOW_BYTE video_data
       00:E4A7  A9 00              lda    HIGH_BYTE #CR_BGON
       00:E4A9  8D 03 00           sta    HIGH_BYTE video_data
  494  00:E4AC  60                rts
  495  00:E4AD            END_TEST6:
  496                             ;Add incorrect value in second part
  497                             vreg    #5      ;CR
       00:E4AD  A9 05             lda     #5
       00:E4AF  85 F7             sta     <_vreg
       00:E4B1  8D 00 00          sta     video_reg
  498                             stw             #CR_BGOFF,video_data
       00:E4B4  A9 4C              lda    LOW_BYTE #CR_BGOFF
       00:E4B6  8D 02 00           sta    LOW_BYTE video_data
       00:E4B9  A9 00              lda    HIGH_BYTE #CR_BGOFF
       00:E4BB  8D 03 00           sta    HIGH_BYTE video_data
  499  00:E4BE  EA                nop
  500  00:E4BF  EA                nop
  501  00:E4C0  EA                nop
  502  00:E4C1  EA                nop
  503  00:E4C2  EA                nop
  504  00:E4C3  EA                nop
  505  00:E4C4  EA                nop
  506  00:E4C5  EA                nop
  507  00:E4C6  EA                nop
  508  00:E4C7  EA                nop
  509  00:E4C8  EA                nop
  510  00:E4C9  EA                nop
  511  00:E4CA  EA                nop
  512  00:E4CB  EA                nop
  513  00:E4CC  EA                nop
  514  00:E4CD  EA                nop
  515                             ;Renable offset in second part
  516                             vreg    #5      ;CR
       00:E4CE  A9 05             lda     #5
       00:E4D0  85 F7             sta     <_vreg
       00:E4D2  8D 00 00          sta     video_reg
  517                             stw             #CR_BGON,video_data
       00:E4D5  A9 CC              lda    LOW_BYTE #CR_BGON
       00:E4D7  8D 02 00           sta    LOW_BYTE video_data
       00:E4DA  A9 00              lda    HIGH_BYTE #CR_BGON
       00:E4DC  8D 03 00           sta    HIGH_BYTE video_data
  518  00:E4DF  60                rts
  519                             
  520  00:E4E0            INSERT_NOPS:    ; load acc with corresponding number of nops for the test       
  521                             ; jump to routine corresponding to number of nops
  522  00:E4E0  0A                asl a
  523  00:E4E1  22                sax     
  524  00:E4E2  7C F5 E4          jmp [cycle_routine_array,x]     ;WRONG as RTS does not work
  525                             
  526  00:E4E5            EIGHT_NOPS:
  527  00:E4E5  EA                nop             ;2cycles
  528  00:E4E6            SIX_NOPS:
  529  00:E4E6  EA                nop             ;2cycles
  530  00:E4E7            FOUR_NOPS:
  531  00:E4E7  EA                nop             ;2cycles
  532  00:E4E8            TWO_NOPS:
  533  00:E4E8  EA                nop             ;2cycles
  534  00:E4E9            ZERO_NOPS:
  535  00:E4E9  EA                nop             ;2cycles
  536  00:E4EA  4C F8 E3          jmp RESUME_TESTING
  537                     
  538  00:E4ED            NINE_NOPS:
  539  00:E4ED  EA                nop             ;2cycles
  540  00:E4EE            SEVEN_NOPS:
  541  00:E4EE  EA                nop             ;2cycles
  542  00:E4EF            FIVE_NOPS:
  543  00:E4EF  EA                nop             ;2cycles
  544  00:E4F0            THREE_NOPS:
  545  00:E4F0  EA                nop             ;2cycles
  546  00:E4F1            ONE_NOP:
  547  00:E4F1  22                sax     ;3cycles
  548  00:E4F2  4C F8 E3          jmp RESUME_TESTING
  549                     
  550  00:E4F5            cycle_routine_array:
  551  00:E4F5  E9 E4             .dw ZERO_NOPS, ONE_NOP, TWO_NOPS, THREE_NOPS, FOUR_NOPS, FIVE_NOPS,...
       00:E4F7  F1 E4     
       00:E4F9  E8 E4     
       00:E4FB  F0 E4     
       00:E4FD  E7 E4     
       00:E4FF  EF E4     
       00:E501  E6 E4     
       00:E503  EE E4     
       00:E505  E5 E4     
       00:E507  ED E4     
  553                     
  554                     
  555  00:E509            nop_pos_array:
  556  00:E509  A2 00             .dw $00A2, $00A7, $00AD, $00B2, $00B8, $00BD 
       00:E50B  A7 00     
       00:E50D  AD 00     
       00:E50F  B2 00     
       00:E511  B8 00     
       00:E513  BD 00     
  557                     
  558                     
  559  00:E515            Intro_Text:
  560                          ;0123456789ABCDEF0123456789ABCDEF
  561  00:E515  20 2D 20   .db " - BYR, BXR, CR LATCH TEST -    "
       00:E518  42 59 52  
       00:E51B  2C 20 42  
       00:E51E  58 52 2C  
       00:E521  20 43 52  
       00:E524  20 4C 41  
       00:E527  54 43 48  
       00:E52A  20 54 45  
       00:E52D  53 54 20  
       00:E530  2D 20 20  
       00:E533  20 20     
  562  00:E535  41 44 4A   .db "ADJUST CYCLES BEFORE OR AFTER   "
       00:E538  55 53 54  
       00:E53B  20 43 59  
       00:E53E  43 4C 45  
       00:E541  53 20 42  
       00:E544  45 46 4F  
       00:E547  52 45 20  
       00:E54A  4F 52 20  
       00:E54D  41 46 54  
       00:E550  45 52 20  
       00:E553  20 20     
  563  00:E555  4C 41 54   .db "LATCHING.               RCR=XXX "
       00:E558  43 48 49  
       00:E55B  4E 47 2E  
       00:E55E  20 20 20  
       00:E561  20 20 20  
       00:E564  20 20 20  
       00:E567  20 20 20  
       00:E56A  20 20 20  
       00:E56D  52 43 52  
       00:E570  3D 58 58  
       00:E573  58 20     
  564  00:E575  20 20 20   .db "   BYR        BXR        CR     "
       00:E578  42 59 52  
       00:E57B  20 20 20  
       00:E57E  20 20 20  
       00:E581  20 20 42  
       00:E584  58 52 20  
       00:E587  20 20 20  
       00:E58A  20 20 20  
       00:E58D  20 43 52  
       00:E590  20 20 20  
       00:E593  20 20     
  565  00:E595  42 3C 30   .db "B<00>A<00> B<00>A<00> B<00>A<00>",0
       00:E598  30 3E 41  
       00:E59B  3C 30 30  
       00:E59E  3E 20 42  
       00:E5A1  3C 30 30  
       00:E5A4  3E 41 3C  
       00:E5A7  30 30 3E  
       00:E5AA  20 42 3C  
       00:E5AD  30 30 3E  
       00:E5B0  41 3C 30  
       00:E5B3  30 3E 00  
  566                     
  567                     
  568                     ;============================================================
  569                     ; Other includes / banks go here (for now)
  570                     
#[2]   INCLUDE/gfx_work.asm
  571                             .include "INCLUDE/gfx_work.asm"
    1                     ;
    2                     ; Graphics routines that I write will go here
    3                     ;
    4                     
    5  00:E5B6            Clear_BAT:
    6                             vreg    #$00
       00:E5B6  A9 00             lda     #$00
       00:E5B8  85 F7             sta     <_vreg
       00:E5BA  8D 00 00          sta     video_reg
    7                             stwz    video_data
       00:E5BD  9C 02 00           stz    LOW_BYTE video_data
       00:E5C0  9C 03 00           stz    HIGH_BYTE video_data
    8                             vreg    #$02
       00:E5C3  A9 02             lda     #$02
       00:E5C5  85 F7             sta     <_vreg
       00:E5C7  8D 00 00          sta     video_reg
    9                     
   10  00:E5CA  A2 00             ldx     #LOW(BATWIDTH*BATHEIGHT)
   11  00:E5CC  A0 04             ldy     #HIGH(BATWIDTH*BATHEIGHT)
   12  00:E5CE            .clrlp:
   13  00:E5CE  13 20             st1     #$20    ;"whitespace character"
   14  00:E5D0  23 01             st2     #$01
   15  00:E5D2  CA                dex
   16  00:E5D3  D0 F9             bne     .clrlp
   17  00:E5D5  88                dey
   18  00:E5D6  D0 F6             bne     .clrlp
   19  00:E5D8  60                rts
   20                     
   21                     
   22  00:E5D9            Print_Byte:     ;Prints a byte as HEX
   23  00:E5D9  48                pha
   24  00:E5DA  4A                lsr a
   25  00:E5DB  4A                lsr a
   26  00:E5DC  4A                lsr a
   27  00:E5DD  4A                lsr a
   28                                     ;store char # (0-F) of high nyb
   29  00:E5DE  09 10             ora     #LOW(HEX_VRAM/16)
   30  00:E5E0  8D 02 00          sta     video_data
   31  00:E5E3  A9 01             lda     #$00+(HEX_VRAM/4096) ;font pal + tile no.
   32  00:E5E5  8D 03 00          sta     video_data+1
   33  00:E5E8  68                pla
   34  00:E5E9            Print_Nyb:
   35  00:E5E9  48                pha
   36  00:E5EA  29 0F             and     #$0F    ;isolate low nyb.
   37  00:E5EC  09 10             ora     #LOW(HEX_VRAM/16)
   38  00:E5EE  8D 02 00          sta     video_data
   39  00:E5F1  A9 01             lda     #$00+(HEX_VRAM/4096) ;font pal + tile no.
   40  00:E5F3  8D 03 00          sta     video_data+1
   41  00:E5F6  68                pla
   42  00:E5F7  60                rts
   43                     
   44  00:E5F8            Print_Text:                     ;_si points to zero-terminated text
   45  00:E5F8  20 99 FE          jsr     set_write       ;_di points to VRAM add.
   46  00:E5FB            Print_Tex2:
   47  00:E5FB  C2                cly
   48  00:E5FC  A2 01             ldx     #$00+(ASCII_VRAM/4096)  ;Palette 0, $1000 VRAM
   49  00:E5FE            .loop1:
   50  00:E5FE  B1 EE             lda     [_si],Y
   51  00:E600  F0 0E             beq     .finish
   52  00:E602  8D 02 00          sta     video_data
   53  00:E605  8E 03 00          stx     video_data+1
   54                             incw    <_si
       00:E608  E6 EE              inc    <_si              ; value at stated memory
       00:E60A  D0 02              bne    .x_00133           ; location
       00:E60C  E6 EF              inc    <_si+1
       00:E60E            .x_00133:
   55  00:E60E  80 EE             bra     .loop1
   56  00:E610            .finish:
   57  00:E610  60                rts
   58                     
   59                     
   60  00:E611            Draw_BonkBG:    ;draws 16x16 tile box w/ graphics on-screen
   61                             stw     #(1*$1000)+(BONKBG_VRAM/16),<_si ;Pal 1 + Tile No.
       00:E611  A9 00              lda    LOW_BYTE #(1*$1000)+(BONKBG_VRAM/16)
       00:E613  85 EE              sta    LOW_BYTE <_si
       00:E615  A9 12              lda    HIGH_BYTE #(1*$1000)+(BONKBG_VRAM/16)
       00:E617  85 EF              sta    HIGH_BYTE <_si
   62                             stw     #$00E8,<_di
       00:E619  A9 E8              lda    LOW_BYTE #$00E8
       00:E61B  85 F0              sta    LOW_BYTE <_di
       00:E61D  A9 00              lda    HIGH_BYTE #$00E8
       00:E61F  85 F1              sta    HIGH_BYTE <_di
   63  00:E621  20 99 FE          jsr     set_write       ;set VRAM address
   64                     
   65  00:E624  A0 10             ldy     #16             ;outer loop (vert. lines)
   66  00:E626            .bonklp0:
   67  00:E626  A2 10             ldx     #16             ;inner loop (horiz. tiles)
   68  00:E628            .bonklp1:
   69                             stw     <_si,video_data ;lay down tile definition
       00:E628  A5 EE              lda    LOW_BYTE <_si
       00:E62A  8D 02 00           sta    LOW_BYTE video_data
       00:E62D  A5 EF              lda    HIGH_BYTE <_si
       00:E62F  8D 03 00           sta    HIGH_BYTE video_data
   70                             incw    <_si
       00:E632  E6 EE              inc    <_si              ; value at stated memory
       00:E634  D0 02              bne    .x_00137           ; location
       00:E636  E6 EF              inc    <_si+1
       00:E638            .x_00137:
   71  00:E638  CA                dex
   72  00:E639  D0 ED             bne     .bonklp1
   73                             addw    #BATWIDTH,<_di  ;then jump down to next line
                0000              .if     (2 = 3)
                                  .else
                                   ; 2-arg mode
                                   ;
       00:E63B  18                 clc
       00:E63C  A5 F0              lda    LOW_BYTE <_di
       00:E63E  69 20              adc    LOW_BYTE #BATWIDTH
       00:E640  85 F0              sta    LOW_BYTE <_di
       00:E642  A5 F1              lda    HIGH_BYTE <_di
       00:E644  69 00              adc    HIGH_BYTE #BATWIDTH
       00:E646  85 F1              sta    HIGH_BYTE <_di
                                  .endif
   74  00:E648  20 99 FE          jsr     set_write
   75  00:E64B  88                dey
   76  00:E64C  D0 D8             bne     .bonklp0
   77                     
   78  00:E64E  60                rts
#[1]   cr_byr_bxr_latching_test.asm
  572                     
  573                     ;============================================================
  574                     ;============================================================
  575                     
  576           0002              .bank $2
  577           4000              .org $4000
  578  02:4000            MyFont: .incchr "INCLUDE/parofont.pcx"
  579  02:5000            SprCHR: .incspr "INCLUDE/bonkSP.pcx"
  580                     
  581  02:5400            FontPal: .incpal "INCLUDE/parofont.pcx",0,1
  582  02:5420            BonkPal: .incpal "INCLUDE/bonkBG.pcx",0,1
  583  02:5440            SPRPal:  .incpal "INCLUDE/bonkSP.pcx",0,1
  584                     
  585                     
  586           0003              .bank $3
  587           4000              .org $4000
  588  03:4000            BonkBG: .incchr "INCLUDE/bonkBG.pcx"
