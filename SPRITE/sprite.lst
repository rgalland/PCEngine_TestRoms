#[1]   sprite.asm
   11                       	;--------------- END INCLUDES ------------------
   12                       	
   13                       	;PAD 
   14           0080        	PAD_LEFT	= $80
   15           0040        	PAD_DOWN	= $40
   16           0020        	PAD_RIGHT	= $20
   17           0010        	PAD_UP		= $10
   18           0008        	PAD_RUN 	= $08
   19           0004        	PAD_SELECT	= $04
   20           0002        	PAD_II 		= $02
   21           0001        	PAD_I		= $01
   22                       	
   23                       	; graphics cosntants
   24           0001        	PAL_LEN      = 1
   25                       	;BG_MAP_ADDR	 = $0000
   26                       	;BG_MAP_LEN 	 = $3FFF	; will require 2 banks in ROM
   27           4000        	SP_VRAM_ADDR = $4000
   28           0768        	SP_VRAM_LEN  = $768
   29           7F00        	SATB_ADDR    = $7F00
   30                       	
   31                       	; tilemap dimensions
   32           0020        	BATWIDTH	= 32	;Set to 32, 64, or 128
   33           0020        	BATHEIGHT	= 32	;Set to 32 or 64.
   34                       	
   35                       	;SCREEN_HEIGHT = 224	; physical screen height i.e number of scanlines
   36                       	;SCREEN_WIDTH  = 256	; physical screen height i.e number of scanlines
   37                       	;TILE_W		= 8
   38                       	;TILE_H		= 8
   39                       	
   40                       	; sprite constants
   41           0020        	MIN_X		= $20	; Minimum xpos for spr
   42           0100        	MAX_X		= $100	; Maximum xpos for spr
   43           0040        	MIN_Y		= $40	; Minimum ypos for spr
   44           00F0        	MAX_Y		= $F0	; Maximum ypos for spr
   45                       	
   46           0010        	SPRITE_TILE_Y = $10
   47           0010        	SPRITE_TILE_X = $10
   48           0200        	SPRITE_PATTERN_ADDR = SP_VRAM_ADDR >> 5
   49                       	
   50                       	
   51                       	; unused but called in subroutines
   52           0000        	ASCII_VRAM    = $0000
   53           0100        	HEX_VRAM      = ASCII_VRAM+$100
   54                       	
   55                       	; Zero-page variables
   56           2000        		.zp
   57  F8:2000              	pad_prev:   .ds 1
   58  F8:2001              	pad_cur:    .ds 1
   59  F8:2002              	xpos:		.ds 2
   60  F8:2004              	ypos:		.ds 2
   61  F8:2006              	spx:		.ds 2
   62  F8:2008              	spy:		.ds 2
   63  F8:200A              	next_spx:   .ds 2
   64  F8:200C              	next_spy:   .ds 2
   65                       	
   66                       	;Higher RAM variables
   67           2200        		.bss
   68  F8:2200              	satb:		.ds 512	;Sprite Attribute Table Buffer
   69                       	
   70                       	;==============================
   71           0000        		.code
   72           0000        		.bank	$0
   73           E000        		.org	$E000
   74                       	
   75                       	
   76  00:E000              	MAIN:
   77                       		INTS_OFF		;DISABLE INTERRUPTS!
       00:E000  03 05       		st0  #5
       00:E002  13 00       		st1   #$00
       00:E004  23 00       		st2   #$00
   78                       		
   79                       		
   80  00:E006  9C 00 20    		stz pad_prev
   81                       		stwz xpos
       00:E009  9C 02 20    		 stz	LOW_BYTE xpos
       00:E00C  9C 03 20    		 stz	HIGH_BYTE xpos
   82  00:E00F  9C 04 20    		stz ypos
   83                       		
   84  00:E012  20 84 E1    		jsr	Clear_BAT
   85                       	
   86                       		; palette and sprite tiles stored in 1 bank
   87                       		map	SpritePal
       00:E015  A9 01       		 lda   #bank(SpritePal)	; addressable memory
       00:E017  53 04       		 tam   #page(SpritePal)
   88                       		set_sprpal 	#$0, SpritePal, #PAL_LEN
       00:E019  A9 00       		 lda   #$0
                            		 add   #16
                0000        		.if (1 = 2)		; register A (handle carry
                            		.else
       00:E01B  18          		 clc
       00:E01C  69 10       		 adc	#16
                            		.endif
       00:E01E  85 F8       		 sta   <_al
                            		 stw   #SpritePal,<_si
       00:E020  A9 00       		 lda	LOW_BYTE #SpritePal
       00:E022  85 EE       		 sta	LOW_BYTE <_si
       00:E024  A9 40       		 lda	HIGH_BYTE #SpritePal
       00:E026  85 EF       		 sta	HIGH_BYTE <_si
                0002        		.if 2
       00:E028  A9 01       		 lda   #PAL_LEN
                            		.else
                            		.endif
       00:E02A  85 FC       		 sta   <_cl
       00:E02C  20 00 FE    		 jsr   set_palette
   89                       		
   90                       		; tia to transfer $4620 bytes from rom to vram
   91                       		; set MAWR to 0 and then switch to VRAM DATA reg 
   92  00:E02F  03 00       		st0 #$0
   93  00:E031  13 00       		st1 #LOW(SP_VRAM_ADDR)
   94  00:E033  23 40       		st2 #HIGH(SP_VRAM_ADDR)
   95  00:E035  03 02       		st0 #$2
   96                       		
   97  00:E037  E3 20 40 02 		tia SpriteTiles, $2, SP_VRAM_LEN
       00:E03B  00 68 07     
   98                       		
   99                       		; sprite #0 rough in the centre of the screen 
  100                       		; init sprite pos
  101  00:E03E  A9 80       		lda #128
  102  00:E040  8D 06 20    		sta spx
  103  00:E043  9C 07 20    		stz spx+1
  104  00:E046  A9 70       		lda #112
  105  00:E048  8D 08 20    		sta spy
  106  00:E04B  8D 0C 20    		sta next_spy
  107  00:E04E  9C 09 20    		stz spy+1
  108  00:E051  9C 0D 20    		stz next_spy+1
  109                       	
  110  00:E054  9C 00 22    		stz	satb	;zero out sprite table
  111  00:E057  73 00 22 01 		tii	satb,satb+1,511
       00:E05B  22 FF 01     
  112                       		
  113                       		; loop 3 times to copy data in satb copy in RAM for sprite made of 3 32x16 sprites
  114  00:E05E  A2 00       		ldx #$0	
  115  00:E060              	load_sprite_table:
  116  00:E060  AD 0C 20    		lda next_spy
  117  00:E063  9D 00 22    		sta satb,x		; yl pos
  118  00:E066  AD 0D 20    		lda next_spy+1
  119  00:E069  9D 01 22    		sta satb+1,x	; yh pos
  120  00:E06C  AD 06 20    		lda spx
  121  00:E06F  9D 02 22    		sta satb+2,x	; xl pos
  122  00:E072  AD 07 20    		lda spx+1
  123  00:E075  9D 03 22    		sta satb+3,x	; xh pos
  124  00:E078  8A          		txa
  125  00:E079  4A          		lsr
  126  00:E07A  69 00       		adc #LOW(SPRITE_PATTERN_ADDR)
  127  00:E07C  9D 04 22    		sta satb+4,x	; pattern al
  128  00:E07F  A9 02       		lda #HIGH(SPRITE_PATTERN_ADDR)
  129  00:E081  9D 05 22    		sta satb+5,x	; pattern ah
  130  00:E084  9E 06 22    		stz satb+6,x	; attr al
  131  00:E087  A9 01       		lda #$1
  132  00:E089  9D 07 22    		sta satb+7,x	; attr ah x = 32
  133  00:E08C  18          		clc
  134                       		; increase y offset
  135  00:E08D  AD 0C 20    		lda next_spy
  136  00:E090  69 10       		adc #SPRITE_TILE_Y
  137  00:E092  8D 0C 20    		sta next_spy
  138  00:E095  AD 0D 20    		lda next_spy+1
  139  00:E098  69 00       		adc #0
  140  00:E09A  8D 0D 20    		sta next_spy+1
  141  00:E09D  8A          		txa
  142  00:E09E  69 08       		adc #$8
  143  00:E0A0  AA          		tax	
  144  00:E0A1  C9 18       		cmp #8*3 
  145  00:E0A3  D0 BB       		bne load_sprite_table
  146                       	
  147  00:E0A5  20 C8 E0    		jsr copy_satb_to_vram
  148                       		
  149                       		; enable sprite automatic update	
  150  00:E0A8  03 0F       		st0 #$F		; DCR index in VDC
  151  00:E0AA  13 10       		st1 #$10	; start auto sprite DMA 
  152                       		
  153                       		BORD_BLUE
                            		stw	#$0100,color_reg
       00:E0AC  A9 00       		 lda	LOW_BYTE #$0100
       00:E0AE  8D 02 04    		 sta	LOW_BYTE color_reg
       00:E0B1  A9 01       		 lda	HIGH_BYTE #$0100
       00:E0B3  8D 03 04    		 sta	HIGH_BYTE color_reg
                            		stw	#%0000_000_000_000_111,color_data
       00:E0B6  A9 07       		 lda	LOW_BYTE #%0000_000_000_000_111
       00:E0B8  8D 04 04    		 sta	LOW_BYTE color_data
       00:E0BB  A9 00       		 lda	HIGH_BYTE #%0000_000_000_000_111
       00:E0BD  8D 05 04    		 sta	HIGH_BYTE color_data
  154                       		SCREEN_ON
       00:E0C0  03 05       		st0  #5
       00:E0C2  13 CC       		st1   #$CC
       00:E0C4  23 00       		st2   #$00
  155                       	
  156  00:E0C6              	.loop            	;Here's an infinite loop...
  157  00:E0C6  80 FE       		bra	.loop
  158                       	
  159                       	
  160                       	
  161  00:E0C8              	copy_satb_to_vram:
  162                       		; write sat table to 7F00 in VRAM
  163  00:E0C8  03 00       		st0 #$0	; addr reg in VDC
  164  00:E0CA  13 00       		st1 #LOW(SATB_ADDR)
  165  00:E0CC  23 7F       		st2 #HIGH(SATB_ADDR)
  166  00:E0CE  03 02       		st0 #$2	; data rw reg in VDC
  167  00:E0D0  E3 00 22 02 		tia satb, $2, 512
       00:E0D4  00 00 02     
  168  00:E0D7  60          		rts
  169                       	
  170                       	
  171                       		
  172                       	
  173  00:E0D8              	MY_VSYNC:
  174  00:E0D8  A9 00       		lda #$0 
  175  00:E0DA  8D 00 10    		sta joyport
  176  00:E0DD  A9 02       		lda #$2 
  177  00:E0DF  8D 00 10    		sta joyport
  178  00:E0E2  AD 00 10    		lda joyport	; Run, Select, II, I
  179  00:E0E5  29 0F       		and #$0F
  180  00:E0E7  8D 01 20    		sta pad_cur
  181  00:E0EA  A9 01       		lda #$1 
  182  00:E0EC  8D 00 10    		sta joyport
  183  00:E0EF  A9 03       		lda #$3 
  184  00:E0F1  8D 00 10    		sta joyport	
  185  00:E0F4  AD 00 10    		lda joyport	; Left, Down, Right, Up
  186  00:E0F7  0A          		asl a
  187  00:E0F8  0A          		asl a
  188  00:E0F9  0A          		asl a
  189  00:E0FA  0A          		asl a
  190  00:E0FB  0D 01 20    		ora pad_cur
  191  00:E0FE  49 FF       		eor #$FF		; invert so 1 means button pressed
  192  00:E100  8D 01 20    		sta pad_cur
  193  00:E103  8D 00 20    		sta pad_prev
  194  00:E106  29 F0       		and #$F0			;only check directions
  195  00:E108  D0 01       		bne test_PAD_DOWN
  196  00:E10A  60          		rts
  197                       		
  198  00:E10B              	test_PAD_DOWN:
  199  00:E10B  AD 01 20    		lda pad_cur
  200  00:E10E  89 40       		bit #PAD_DOWN
  201  00:E110  F0 10       		beq test_PAD_UP
  202  00:E112  AD 00 22    		lda satb	;	yl 
  203  00:E115  C9 F0       		cmp #MAX_Y
  204  00:E117  B0 09       		bcs	test_PAD_UP	;
  205  00:E119  EE 00 22    		inc satb+8*0
  206  00:E11C  EE 08 22    		inc satb+8*1
  207  00:E11F  EE 10 22    		inc satb+8*2
  208                       		
  209  00:E122              	test_PAD_UP:
  210  00:E122  AD 01 20    		lda pad_cur
  211  00:E125  89 10       		bit #PAD_UP
  212  00:E127  F0 10       		beq test_PAD_RIGHT
  213  00:E129  AD 00 22    		lda satb	;	yl 
  214  00:E12C  C9 40       		cmp #MIN_Y
  215  00:E12E  F0 09       		beq	test_PAD_RIGHT	;
  216  00:E130  CE 00 22    		dec satb+8*0
  217  00:E133  CE 08 22    		dec satb+8*1
  218  00:E136  CE 10 22    		dec satb+8*2
  219                       		
  220  00:E139              	test_PAD_RIGHT:
  221  00:E139  AD 01 20    		lda pad_cur
  222  00:E13C  89 20       		bit #PAD_RIGHT
  223  00:E13E  F0 19       		beq test_PAD_LEFT
  224  00:E140  AD 03 22    		lda satb+3	;	xh 
  225  00:E143  D0 14       		bne test_PAD_LEFT	; MAX_X	= $100	; Maximum xpos for spr
  226  00:E145  EE 02 22    		inc satb+2+8*0	; xl
  227  00:E148  EE 0A 22    		inc satb+2+8*1
  228  00:E14B  EE 12 22    		inc satb+2+8*2
  229  00:E14E  D0 09       		bne test_PAD_LEFT
  230  00:E150  EE 03 22    		inc satb+3+8*0	; xh
  231  00:E153  EE 0B 22    		inc satb+3+8*1
  232  00:E156  EE 13 22    		inc satb+3+8*2
  233                       				
  234  00:E159              	test_PAD_LEFT:	
  235  00:E159  AD 01 20    		lda pad_cur
  236  00:E15C  89 80       		bit #PAD_LEFT
  237  00:E15E  F0 1F       		beq update_vram
  238  00:E160  38          		sec
  239  00:E161  AD 02 22    		lda satb+2	;	xl 
  240  00:E164  E9 20       		sbc #MIN_X
  241  00:E166  AD 03 22    		lda satb+3	;	xh
  242  00:E169  E9 00       		sbc #$0
  243  00:E16B  90 12       		bcc update_vram
  244  00:E16D  9C 03 22    		stz satb+3+8*0	;	xh
  245  00:E170  9C 0B 22    		stz satb+3+8*1	;	xh
  246  00:E173  9C 13 22    		stz satb+3+8*2	;	xh
  247  00:E176  CE 02 22    		dec satb+2+8*0	; xl
  248  00:E179  CE 0A 22    		dec satb+2+8*1
  249  00:E17C  CE 12 22    		dec satb+2+8*2
  250                       	
  251                       				
  252  00:E17F              	update_vram:
  253  00:E17F  20 C8 E0    		jsr copy_satb_to_vram
  254                       		; save crrent rreading to previous reading for next interrupt
  255  00:E182  60          		rts
  256                       	
  257  00:E183              	MY_HSYNC:
  258  00:E183  60          		rts
  259                       	
  260                       	
  261                       	;============================================================
  262                       	; Other includes / banks go here (for now)
  263                       	
#[2]   INCLUDE/gfx_work.asm
  264                       		.include "INCLUDE/gfx_work.asm"
    1                       	;
    2                       	; Graphics routines that I write will go here
    3                       	;
    4                       	
    5  00:E184              	Clear_BAT:
    6                       		vreg	#$00
       00:E184  A9 00       		lda	#$00
       00:E186  85 F7       		sta	<_vreg
       00:E188  8D 00 00    		sta	video_reg
    7                       		stwz	video_data
       00:E18B  9C 02 00    		 stz	LOW_BYTE video_data
       00:E18E  9C 03 00    		 stz	HIGH_BYTE video_data
    8                       		vreg	#$02
       00:E191  A9 02       		lda	#$02
       00:E193  85 F7       		sta	<_vreg
       00:E195  8D 00 00    		sta	video_reg
    9                       	
   10  00:E198  A2 00       		ldx	#LOW(BATWIDTH*BATHEIGHT)
   11  00:E19A  A0 04       		ldy     #HIGH(BATWIDTH*BATHEIGHT)
   12  00:E19C              	.clrlp:
   13  00:E19C  13 20       		st1	#$20	;"whitespace character"
   14  00:E19E  23 01       		st2	#$01
   15  00:E1A0  CA          		dex
   16  00:E1A1  D0 F9       		bne     .clrlp
   17  00:E1A3  88          		dey
   18  00:E1A4  D0 F6       		bne	.clrlp
   19  00:E1A6  60          		rts
   20                       	
   21                       	
   22  00:E1A7              	Print_Byte:	;Prints a byte as HEX
   23  00:E1A7  48          		pha
   24  00:E1A8  4A          		lsr a
   25  00:E1A9  4A          		lsr a
   26  00:E1AA  4A          		lsr a
   27  00:E1AB  4A          		lsr a
   28                       			;store char # (0-F) of high nyb
   29  00:E1AC  09 10       		ora	#LOW(HEX_VRAM/16)
   30  00:E1AE  8D 02 00    		sta	video_data
   31  00:E1B1  A9 10       		lda	#$10+(HEX_VRAM/4096) ;font pal + tile no.
   32  00:E1B3  8D 03 00    		sta	video_data+1
   33  00:E1B6  68          		pla
   34  00:E1B7              	Print_Nyb:
   35  00:E1B7  48          		pha
   36  00:E1B8  29 0F       		and	#$0F	;isolate low nyb.
   37  00:E1BA  09 10       		ora	#LOW(HEX_VRAM/16)
   38  00:E1BC  8D 02 00    		sta	video_data
   39  00:E1BF  A9 10       		lda	#$10+(HEX_VRAM/4096) ;font pal + tile no.
   40  00:E1C1  8D 03 00    		sta	video_data+1
   41  00:E1C4  68          		pla
   42  00:E1C5  60          		rts
   43                       	
   44                       	
   45                       	
   46                       	
   47  00:E1C6              	Print_Text:			;_si points to zero-terminated text
   48  00:E1C6  20 99 FE    		jsr	set_write       ;_di points to VRAM add.
   49  00:E1C9              	Print_Tex2:
   50  00:E1C9  C2          		cly
   51  00:E1CA  A2 00       		ldx	#$00+(ASCII_VRAM/4096)	;Palette 0, $1000 VRAM
   52  00:E1CC              	.loop1:
   53  00:E1CC  B1 EE       		lda	[_si],Y
   54  00:E1CE  F0 0E       		beq	.finish
   55  00:E1D0  8D 02 00    		sta	video_data
   56  00:E1D3  8E 03 00    		stx	video_data+1
   57                       		incw	<_si
       00:E1D6  E6 EE       		 inc	<_si		; value at stated memory
       00:E1D8  D0 02       		 bne	.x_00022		; location
       00:E1DA  E6 EF       		 inc	<_si+1
       00:E1DC              	.x_00022:
   58  00:E1DC  80 EE       		bra	.loop1
   59  00:E1DE              	.finish:
   60  00:E1DE  60          		rts
   61                       	
   62                       		
   63                       	
   64                       	
#[1]   sprite.asm
  265                       	;============================================================
  266                       	;============================================================
  267           0001        		.bank $1
  268           4000        		.org $4000
  269  01:4000              	SpritePal: 		.incbin "graphics/robot.pal"
  270                       	;SpriteTiles: 	.incbin "graphics/robot.tiles"
  271  01:4020              	SpriteTiles: 	.incspr "graphics/robot.png",0,0,2,3	;x=y=0 width =2, height = 1
  272                       				;	.incspr "graphics/robot.png",0,16,2,1	;x=y=0 width =2, height = 1
  273                       				;	.incspr "graphics/robot.png",0,32,2,1	;x=y=0 width =2, height = 1
  274                       	
  275                       	
  276                       	
